head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2007.08.10.20.21.26;	author khansen;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.22.13.35.20;	author khansen;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.30.07.56.29;	author kenth;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@/*
 * $Id: loc.h,v 1.2 2007/07/22 13:35:20 khansen Exp khansen $
 * $Log: loc.h,v $
 * Revision 1.2  2007/07/22 13:35:20  khansen
 * convert tabs to whitespaces
 *
 * Revision 1.1  2004/06/30 07:56:29  kenth
 * Initial revision
 *
 */

/**
 * Definitions for flex location tracking.
 */

#ifndef LOC_H
#define LOC_H

#if ! defined (YYLTYPE) && ! defined (YYLTYPE_IS_DECLARED)
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
  const char *file;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif

const char *yy_current_filename();

typedef struct YYLTYPE location;

/* Initialize LOC. */
     # define LOCATION_RESET(Loc)                  \
       (Loc).first_column = (Loc).first_line = 1;  \
       (Loc).last_column =  (Loc).last_line = 1; \
       (Loc).file = yy_current_filename();

     /* Advance of NUM lines. */
     # define LOCATION_LINES(Loc, Num)             \
       (Loc).last_column = 1;                      \
       (Loc).last_line += Num; \
       (Loc).file = (Loc).file;

     /* Restart: move the first cursor to the last position. */
     # define LOCATION_STEP(Loc)                   \
       (Loc).first_column = (Loc).last_column;     \
       (Loc).first_line = (Loc).last_line; \
       (Loc).file = (Loc).file;

     /* Output LOC on the stream OUT. */
     # define LOCATION_PRINT(Out, Loc)                               \
         fprintf (Out, "%d", (Loc).first_line)
    /*
     # define LOCATION_PRINT(Out, Loc)                               \
       if ((Loc).first_line != (Loc).last_line)                      \
         fprintf (Out, "%d.%d-%d.%d",                                \
                  (Loc).first_line, (Loc).first_column,              \
                  (Loc).last_line, (Loc).last_column - 1);           \
       else if ((Loc).first_column < (Loc).last_column - 1)          \
         fprintf (Out, "%d.%d-%d", (Loc).first_line,                 \
                  (Loc).first_column, (Loc).last_column - 1);        \
       else                                                          \
         fprintf (Out, "%d.%d", (Loc).first_line, (Loc).first_column)
    */

#endif  /* !LOC_H */
@


1.2
log
@convert tabs to whitespaces
@
text
@d2 1
a2 1
 * $Id: loc.h,v 1.1 2004/06/30 07:56:29 kenth Exp khansen $
d4 3
d26 1
a26 1
  char *file;
d33 1
a33 1
char *yy_current_filename();
@


1.1
log
@Initial revision
@
text
@d2 5
a6 2
 * $Id$
 * $Log$
d55 1
a55 1
	/*
d66 1
a66 1
	*/
d68 1
a68 1
#endif	/* !LOC_H */
@
