head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2007.08.12.18.59.10;	author khansen;	state Exp;
branches;
next	1.4;

1.4
date	2007.08.12.02.42.46;	author khansen;	state Exp;
branches;
next	1.3;

1.3
date	2007.07.22.13.35.20;	author khansen;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.06.04.54.00;	author kenth;	state Exp;
branches;
next	1.1;

1.1
date	2004.06.30.07.56.12;	author kenth;	state Exp;
branches;
next	;


desc
@@


1.5
log
@ability to generate pure 6502 binary
@
text
@/*
 * $Id: astproc.h,v 1.4 2007/08/12 02:42:46 khansen Exp khansen $
 * $Log: astproc.h,v $
 * Revision 1.4  2007/08/12 02:42:46  khansen
 * prettify, const
 *
 * Revision 1.3  2007/07/22 13:35:20  khansen
 * convert tabs to whitespaces
 *
 * Revision 1.2  2004/12/06 04:54:00  kenth
 * xorcyst 1.1.0
 *
 * Revision 1.1  2004/06/30 07:56:12  kenth
 * Initial revision
 *
 */

/**
 *    (C) 2004 Kent Hansen
 *
 *    The XORcyst is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *
 *    The XORcyst is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with The XORcyst; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifndef ASTPROC_H
#define ASTPROC_H

#include "astnode.h"

/**
 * Signature for procedure to process an AST node.
 * @@param node The node to process
 * @@param arg General-purpose argument
 * @@param next Next node to process
 * @@return 0 if node children should not be processed, 1 otherwise
 */
typedef int (*astnodeproc)(astnode *, void *, astnode **);

/**
 * Structure that represents a mapping from node type to processor function.
 * All AST traversal functions rely on tables of such mappings.
 */
struct tag_astnodeprocmap {
    astnode_type type;  /* The AST node type (*_NODE, see header file) */
    astnodeproc proc;   /* The function that will process nodes of type */
};

typedef struct tag_astnodeprocmap astnodeprocmap;

/* Function prototypes */
void astproc_first_pass(astnode *);
void astproc_second_pass(astnode *);
void astproc_third_pass(astnode *);
void astproc_fourth_pass(astnode *);
void astproc_fifth_pass(astnode *);
void astproc_walk(astnode *, void *, const astnodeprocmap *);
int astproc_err_count();

#endif  /* !ASTPROC_H */
@


1.4
log
@prettify, const
@
text
@d2 1
a2 1
 * $Id: astproc.h,v 1.3 2007/07/22 13:35:20 khansen Exp khansen $
d4 3
d65 2
@


1.3
log
@convert tabs to whitespaces
@
text
@d2 1
a2 1
 * $Id: astproc.h,v 1.2 2004/12/06 04:54:00 kenth Exp khansen $
d4 3
d62 1
a62 1
void astproc_walk(astnode *, void *, astnodeprocmap *);
@


1.2
log
@xorcyst 1.1.0
@
text
@d2 1
a2 1
 * $Id: astproc.h,v 1.1 2004/06/30 07:56:12 kenth Exp $
d4 3
d49 2
a50 2
	astnode_type type;	/* The AST node type (*_NODE, see header file) */
	astnodeproc proc;	/* The function that will process nodes of type */
d62 1
a62 1
#endif	/* !ASTPROC_H */
@


1.1
log
@Initial revision
@
text
@d2 5
a6 2
 * $Id$
 * $Log$
d32 20
d53 4
a56 17
void astproc_enter_macros(astnode *);
void astproc_expand_macros(astnode *);
void astproc_remove_macro_decls(astnode *);
void astproc_enter_labels(astnode *);
void astproc_count_symbol_references(astnode *);
void astproc_remove_unused_labels(astnode *);
void astproc_tag_extrn_and_public_symbols(astnode *);
void astproc_remove_conditionals(astnode *);
void astproc_globalize_locals(astnode *);
astnode *astproc_fold_constants(astnode *);
void astproc_validate_data_segments(astnode *);
void astproc_validate_symbol_references(astnode *);
void astproc_validate_instruction_operands(astnode *);
void astproc_translate_instructions(astnode *);
void astproc_merge_data_nodes(astnode *);
void astproc_substitute_defines(astnode *);
void astproc_expand_incbins(astnode *);
@
