head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2007.08.19.11.18.56;	author khansen;	state Exp;
branches;
next	1.4;

1.4
date	2007.08.12.18.58.12;	author khansen;	state Exp;
branches;
next	1.3;

1.3
date	2007.08.11.01.24.36;	author khansen;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.22.13.33.26;	author khansen;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.22.12.54.17;	author khansen;	state Exp;
branches;
next	;


desc
@auto-generated parser
@


1.5
log
@--case-insensitive option
@
text
@/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 1



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     INTEGER_LITERAL = 258,
     STRING_LITERAL = 259,
     FILE_PATH = 260,
     IDENTIFIER = 261,
     LOCAL_ID = 262,
     FORWARD_BRANCH = 263,
     BACKWARD_BRANCH = 264,
     LABEL = 265,
     LOCAL_LABEL = 266,
     MNEMONIC = 267,
     _LABEL_ = 268,
     BYTE = 269,
     CHAR = 270,
     WORD = 271,
     DWORD = 272,
     DSB = 273,
     DSW = 274,
     DSD = 275,
     DATASEG = 276,
     CODESEG = 277,
     IF = 278,
     IFDEF = 279,
     IFNDEF = 280,
     ELSE = 281,
     ELIF = 282,
     ENDIF = 283,
     INCSRC = 284,
     INCBIN = 285,
     MACRO = 286,
     REPT = 287,
     WHILE = 288,
     ENDM = 289,
     ALIGN = 290,
     EQU = 291,
     DEFINE = 292,
     END = 293,
     PUBLIC = 294,
     EXTRN = 295,
     CHARMAP = 296,
     STRUC = 297,
     UNION = 298,
     ENDS = 299,
     RECORD = 300,
     ENUM = 301,
     ENDE = 302,
     PROC = 303,
     ENDP = 304,
     SIZEOF = 305,
     MASK = 306,
     TAG = 307,
     MESSAGE = 308,
     WARNING = 309,
     ERROR = 310,
     ZEROPAGE = 311,
     ORG = 312,
     SCOPE_OP = 313,
     HI_OP = 314,
     LO_OP = 315,
     NE_OP = 316,
     EQ_OP = 317,
     GE_OP = 318,
     LE_OP = 319,
     SHR_OP = 320,
     SHL_OP = 321,
     UMINUS = 322
   };
#endif
/* Tokens.  */
#define INTEGER_LITERAL 258
#define STRING_LITERAL 259
#define FILE_PATH 260
#define IDENTIFIER 261
#define LOCAL_ID 262
#define FORWARD_BRANCH 263
#define BACKWARD_BRANCH 264
#define LABEL 265
#define LOCAL_LABEL 266
#define MNEMONIC 267
#define _LABEL_ 268
#define BYTE 269
#define CHAR 270
#define WORD 271
#define DWORD 272
#define DSB 273
#define DSW 274
#define DSD 275
#define DATASEG 276
#define CODESEG 277
#define IF 278
#define IFDEF 279
#define IFNDEF 280
#define ELSE 281
#define ELIF 282
#define ENDIF 283
#define INCSRC 284
#define INCBIN 285
#define MACRO 286
#define REPT 287
#define WHILE 288
#define ENDM 289
#define ALIGN 290
#define EQU 291
#define DEFINE 292
#define END 293
#define PUBLIC 294
#define EXTRN 295
#define CHARMAP 296
#define STRUC 297
#define UNION 298
#define ENDS 299
#define RECORD 300
#define ENUM 301
#define ENDE 302
#define PROC 303
#define ENDP 304
#define SIZEOF 305
#define MASK 306
#define TAG 307
#define MESSAGE 308
#define WARNING 309
#define ERROR 310
#define ZEROPAGE 311
#define ORG 312
#define SCOPE_OP 313
#define HI_OP 314
#define LO_OP 315
#define NE_OP 316
#define EQ_OP 317
#define GE_OP 318
#define LE_OP 319
#define SHR_OP 320
#define SHL_OP 321
#define UMINUS 322




/* Copy the first part of user declarations.  */
#line 1 "parser.y"

/*
 * $Id: parser.y,v 1.12 2007/08/12 18:59:00 khansen Exp khansen $
 * $Log: parser.y,v $
 * Revision 1.12  2007/08/12 18:59:00  khansen
 * ability to generate pure 6502 binary
 *
 * Revision 1.11  2007/08/11 01:25:50  khansen
 * includepaths support (-I option)
 *
 * Revision 1.10  2007/07/22 13:34:38  khansen
 * convert tabs to whitespaces
 *
 * Revision 1.9  2005/01/05 02:28:40  kenth
 * anonymous union parsing
 *
 * Revision 1.8  2004/12/29 21:45:26  kenth
 * xorcyst 1.4.2
 * static indexing
 *
 * Revision 1.7  2004/12/19 19:59:14  kenth
 * xorcyst 1.4.0
 *
 * Revision 1.6  2004/12/16 13:22:27  kenth
 * xorcyst 1.3.5
 *
 * Revision 1.5  2004/12/14 01:50:42  kenth
 * xorcyst 1.3.0
 *
 * Revision 1.4  2004/12/11 02:12:41  kenth
 * xorcyst 1.2.0
 *
 * Revision 1.3  2004/12/09 11:17:15  kenth
 * added: warning_statement, error_statement
 *
 * Revision 1.2  2004/12/06 05:06:21  kenth
 * xorcyst 1.1.0
 *
 * Revision 1.1  2004/06/30 07:57:03  kenth
 * Initial revision
 *
 */
#include <malloc.h>
#include <stdio.h>
#include <string.h>
#include "symtab.h"
#include "loc.h"
#include "xasm.h"
//#define YYDEBUG 1
int yyparse(void);
void yyerror(const char *);   /* In lexer */
int yylex(void);    /* In lexer */
int yypushandrestart(const char *);   /* In lexer */
void __yy_memcpy(char *, char *, int);
extern char *yytext;    /* In lexer */
extern YYLTYPE yylloc;  /* In lexer */
extern astnode *root_node;  /* Root of the generated parse tree */
void handle_incsrc(astnode *);  /* See below */
void handle_incbin(astnode *);  /* See below */


/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 1
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 62 "parser.y"
{
    long integer;
    int mnemonic;
    const char *string;
    const char *label;
    const char *ident;
    astnode *node;
}
/* Line 187 of yacc.c.  */
#line 300 "parser.c"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif

#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
} YYLTYPE;
# define yyltype YYLTYPE /* obsolescent; will be withdrawn */
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif


/* Copy the second part of user declarations.  */


/* Line 216 of yacc.c.  */
#line 325 "parser.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
    YYLTYPE yyls;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  160
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   2037

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  97
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  83
/* YYNRULES -- Number of rules.  */
#define YYNRULES  215
/* YYNRULES -- Number of states.  */
#define YYNSTATES  380

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   322

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
      58,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    93,     2,    73,    66,    92,    78,     2,
      95,    96,    90,    87,    71,    88,    72,    91,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    59,     2,
      82,    65,    81,     2,    60,    62,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    63,    64,
       2,    69,     2,    70,    77,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    67,    76,    68,    94,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    61,    74,    75,    79,    80,    83,    84,
      85,    86,    89
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     6,     9,    10,    12,    15,    18,    20,
      22,    24,    26,    28,    30,    32,    34,    36,    38,    40,
      42,    44,    46,    48,    50,    52,    54,    56,    58,    60,
      62,    64,    66,    68,    70,    72,    74,    76,    78,    80,
      82,    84,    87,    91,    96,   100,   104,   108,   114,   117,
     118,   121,   122,   129,   136,   143,   150,   157,   164,   166,
     169,   171,   174,   179,   181,   185,   189,   193,   196,   200,
     203,   205,   207,   209,   211,   213,   216,   218,   221,   225,
     228,   233,   238,   245,   252,   257,   259,   262,   264,   266,
     268,   270,   272,   274,   276,   280,   282,   284,   286,   288,
     291,   293,   298,   303,   305,   307,   309,   311,   313,   314,
     318,   322,   326,   330,   332,   333,   335,   339,   341,   342,
     344,   348,   352,   356,   360,   364,   368,   372,   376,   380,
     384,   387,   390,   393,   396,   399,   402,   406,   410,   414,
     418,   422,   426,   428,   430,   432,   434,   436,   438,   440,
     442,   443,   445,   447,   456,   458,   459,   461,   464,   469,
     473,   474,   482,   490,   493,   496,   499,   503,   507,   512,
     517,   520,   522,   527,   529,   531,   533,   535,   538,   541,
     543,   547,   551,   555,   557,   559,   567,   569,   570,   574,
     576,   577,   579,   583,   588,   593,   597,   602,   606,   613,
     616,   617,   619,   621,   623,   625,   627,   629,   632,   636,
     640,   645,   650,   654,   656,   658
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
      98,     0,    -1,   100,    99,    -1,    38,   127,    -1,    -1,
     101,    -1,   100,   101,    -1,   126,   102,    -1,   102,    -1,
     149,    -1,   154,    -1,   155,    -1,   164,    -1,   166,    -1,
     161,    -1,   162,    -1,   169,    -1,   170,    -1,   172,    -1,
     173,    -1,   129,    -1,   156,    -1,   176,    -1,   123,    -1,
     124,    -1,   122,    -1,   114,    -1,   115,    -1,   116,    -1,
     119,    -1,   113,    -1,   112,    -1,   111,    -1,   108,    -1,
     107,    -1,   105,    -1,   106,    -1,   171,    -1,   104,    -1,
     103,    -1,   125,    -1,     1,   127,    -1,    57,   131,   127,
      -1,    35,   168,   131,   127,    -1,    54,   131,   127,    -1,
      55,   131,   127,    -1,    53,   131,   127,    -1,    13,   146,
     109,   110,   127,    -1,    65,   131,    -1,    -1,    59,   175,
      -1,    -1,    33,   131,   127,   100,    34,   127,    -1,    32,
     131,   127,   100,    34,   127,    -1,    48,   146,   127,   100,
      49,   127,    -1,    42,   146,   127,   100,    44,   127,    -1,
      43,   147,   127,   100,    44,   127,    -1,    46,   146,   127,
     117,    47,   127,    -1,   118,    -1,   117,   118,    -1,   170,
      -1,   146,   127,    -1,    45,   146,   120,   127,    -1,   121,
      -1,   120,    71,   121,    -1,   146,    59,   131,    -1,    41,
     163,   127,    -1,    21,   127,    -1,    21,    56,   127,    -1,
      22,   127,    -1,   127,    -1,   145,    -1,   128,    -1,    59,
      -1,    58,    -1,   130,   127,    -1,    12,    -1,    12,    62,
      -1,    12,    73,   131,    -1,    12,   131,    -1,    12,   131,
      71,    63,    -1,    12,   131,    71,    64,    -1,    12,    69,
     131,    71,    63,    70,    -1,    12,    69,   131,    70,    71,
      64,    -1,    12,    69,   131,    70,    -1,   132,    -1,    50,
     134,    -1,   136,    -1,   137,    -1,   142,    -1,   148,    -1,
      66,    -1,   143,    -1,   144,    -1,    95,   131,    96,    -1,
      87,    -1,    88,    -1,     8,    -1,     9,    -1,    51,   136,
      -1,   146,    -1,   146,    69,   131,    70,    -1,   146,    95,
     131,    96,    -1,   131,    -1,   138,    -1,   146,    -1,   159,
      -1,   131,    -1,    -1,   146,    61,   146,    -1,   132,    72,
     137,    -1,   132,    72,   132,    -1,    67,   139,    68,    -1,
     140,    -1,    -1,   141,    -1,   140,    71,   141,    -1,   133,
      -1,    -1,     7,    -1,   131,    87,   131,    -1,   131,    88,
     131,    -1,   131,    90,   131,    -1,   131,    91,   131,    -1,
     131,    92,   131,    -1,   131,    78,   131,    -1,   131,    76,
     131,    -1,   131,    77,   131,    -1,   131,    86,   131,    -1,
     131,    85,   131,    -1,    94,   131,    -1,    93,   131,    -1,
      77,   146,    -1,    82,   131,    -1,    81,   131,    -1,    88,
     131,    -1,   131,    80,   131,    -1,   131,    79,   131,    -1,
     131,    81,   131,    -1,   131,    82,   131,    -1,   131,    83,
     131,    -1,   131,    84,   131,    -1,    10,    -1,    11,    -1,
      87,    -1,    88,    -1,     8,    -1,     9,    -1,     6,    -1,
     146,    -1,    -1,     3,    -1,     4,    -1,    23,   131,   127,
     100,   150,   153,    28,   127,    -1,   151,    -1,    -1,   152,
      -1,   151,   152,    -1,    27,   131,   127,   100,    -1,    26,
     127,   100,    -1,    -1,    24,   146,   127,   100,   153,    28,
     127,    -1,    25,   146,   127,   100,   153,    28,   127,    -1,
     157,   127,    -1,   158,   127,    -1,   146,   158,    -1,    56,
     146,   158,    -1,    39,   146,   158,    -1,    56,    39,   146,
     158,    -1,    39,    56,   146,   158,    -1,   159,   160,    -1,
     159,    -1,   159,    69,   131,    70,    -1,    14,    -1,    15,
      -1,    16,    -1,    17,    -1,    52,   146,    -1,    72,   146,
      -1,   133,    -1,   160,    71,   133,    -1,    29,   163,   127,
      -1,    30,   163,   127,    -1,     4,    -1,     5,    -1,    31,
     146,   165,   127,   100,    34,   127,    -1,   168,    -1,    -1,
     146,   167,   127,    -1,   160,    -1,    -1,   146,    -1,   168,
      71,   146,    -1,   146,    36,   133,   127,    -1,   146,    65,
     133,   127,    -1,    37,   146,   127,    -1,    37,   146,   133,
     127,    -1,    39,   168,   127,    -1,    40,   168,    59,   175,
     174,   127,    -1,    60,   146,    -1,    -1,   159,    -1,   146,
      -1,    48,    -1,    13,    -1,   177,    -1,   178,    -1,   146,
     178,    -1,    56,   146,   178,    -1,    39,   146,   178,    -1,
      56,    39,   146,   178,    -1,    39,    56,   146,   178,    -1,
     179,   135,   127,    -1,    18,    -1,    19,    -1,    20,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   116,   116,   120,   121,   125,   126,   133,   134,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   174,   178,   182,   186,   190,   194,   198,   199,
     203,   204,   208,   212,   216,   220,   224,   228,   232,   233,
     237,   238,   242,   246,   247,   251,   255,   259,   260,   263,
     267,   271,   275,   276,   280,   284,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     318,   319,   320,   324,   325,   329,   330,   334,   335,   339,
     343,   344,   348,   352,   353,   357,   358,   362,   363,   367,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   390,   391,   392,   393,
     394,   395,   399,   400,   401,   402,   403,   404,   408,   412,
     413,   417,   418,   422,   426,   427,   431,   432,   436,   440,
     441,   445,   449,   453,   454,   458,   459,   460,   461,   462,
     466,   467,   468,   472,   473,   474,   475,   476,   477,   481,
     482,   486,   490,   494,   495,   499,   503,   504,   508,   512,
     513,   517,   518,   522,   526,   530,   531,   535,   539,   543,
     544,   548,   549,   550,   551,   555,   556,   560,   561,   562,
     563,   564,   568,   572,   573,   574
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "INTEGER_LITERAL", "STRING_LITERAL",
  "FILE_PATH", "IDENTIFIER", "LOCAL_ID", "FORWARD_BRANCH",
  "BACKWARD_BRANCH", "LABEL", "LOCAL_LABEL", "MNEMONIC", "_LABEL_", "BYTE",
  "CHAR", "WORD", "DWORD", "DSB", "DSW", "DSD", "DATASEG", "CODESEG", "IF",
  "IFDEF", "IFNDEF", "ELSE", "ELIF", "ENDIF", "INCSRC", "INCBIN", "MACRO",
  "REPT", "WHILE", "ENDM", "ALIGN", "EQU", "DEFINE", "END", "PUBLIC",
  "EXTRN", "CHARMAP", "STRUC", "UNION", "ENDS", "RECORD", "ENUM", "ENDE",
  "PROC", "ENDP", "SIZEOF", "MASK", "TAG", "MESSAGE", "WARNING", "ERROR",
  "ZEROPAGE", "ORG", "'\\n'", "':'", "'@@'", "SCOPE_OP", "'A'", "'X'",
  "'Y'", "'='", "'$'", "'{'", "'}'", "'['", "']'", "','", "'.'", "'#'",
  "HI_OP", "LO_OP", "'|'", "'^'", "'&'", "NE_OP", "EQ_OP", "'>'", "'<'",
  "GE_OP", "LE_OP", "SHR_OP", "SHL_OP", "'+'", "'-'", "UMINUS", "'*'",
  "'/'", "'%'", "'!'", "'~'", "'('", "')'", "$accept", "assembly_unit",
  "end_opt", "statement_list", "labelable_statement", "statement",
  "org_statement", "align_statement", "warning_statement",
  "error_statement", "message_statement", "label_statement",
  "label_addr_part_opt", "label_type_part_opt", "while_statement",
  "rept_statement", "proc_statement", "struc_decl_statement",
  "union_decl_statement", "enum_decl_statement", "enum_item_list",
  "enum_item", "record_decl_statement", "record_field_list",
  "record_field", "charmap_statement", "dataseg_statement",
  "codeseg_statement", "null_statement", "label_decl", "line_tail",
  "newline", "instruction_statement", "instruction", "expression",
  "indexed_identifier", "extended_expression", "sizeof_arg",
  "expression_opt", "scope_access", "struc_access", "struc_initializer",
  "field_initializer_list_opt", "field_initializer_list",
  "field_initializer", "local_id", "arithmetic_expression",
  "comparison_expression", "label", "identifier", "identifier_opt",
  "literal", "if_statement", "elif_statement_list_opt",
  "elif_statement_list", "elif_statement", "else_part_opt",
  "ifdef_statement", "ifndef_statement", "data_statement",
  "named_data_statement", "unnamed_data_statement", "datatype",
  "expression_list", "incsrc_statement", "incbin_statement",
  "file_specifier", "macro_decl_statement", "param_list_opt",
  "macro_statement", "arg_list_opt", "identifier_list", "equ_statement",
  "assign_statement", "define_statement", "public_statement",
  "extrn_statement", "from_part_opt", "symbol_type", "storage_statement",
  "named_storage_statement", "unnamed_storage_statement", "storage", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,    10,    58,
      64,   313,    65,    88,    89,    61,    36,   123,   125,    91,
      93,    44,    46,    35,   314,   315,   124,    94,    38,   316,
     317,    62,    60,   318,   319,   320,   321,    43,    45,   322,
      42,    47,    37,    33,   126,    40,    41
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    97,    98,    99,    99,   100,   100,   101,   101,   102,
     102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
     102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
     102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
     102,   102,   103,   104,   105,   106,   107,   108,   109,   109,
     110,   110,   111,   112,   113,   114,   115,   116,   117,   117,
     118,   118,   119,   120,   120,   121,   122,   123,   123,   124,
     125,   126,   127,   127,   128,   129,   130,   130,   130,   130,
     130,   130,   130,   130,   130,   131,   131,   131,   131,   131,
     131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
     132,   132,   132,   133,   133,   134,   134,   135,   135,   136,
     137,   137,   138,   139,   139,   140,   140,   141,   141,   142,
     143,   143,   143,   143,   143,   143,   143,   143,   143,   143,
     143,   143,   143,   143,   143,   143,   144,   144,   144,   144,
     144,   144,   145,   145,   145,   145,   145,   145,   146,   147,
     147,   148,   148,   149,   150,   150,   151,   151,   152,   153,
     153,   154,   155,   156,   156,   157,   157,   157,   157,   157,
     158,   158,   158,   159,   159,   159,   159,   159,   159,   160,
     160,   161,   162,   163,   163,   164,   165,   165,   166,   167,
     167,   168,   168,   169,   170,   171,   171,   172,   173,   174,
     174,   175,   175,   175,   175,   176,   176,   177,   177,   177,
     177,   177,   178,   179,   179,   179
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     2,     2,     0,     1,     2,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     3,     4,     3,     3,     3,     5,     2,     0,
       2,     0,     6,     6,     6,     6,     6,     6,     1,     2,
       1,     2,     4,     1,     3,     3,     3,     2,     3,     2,
       1,     1,     1,     1,     1,     2,     1,     2,     3,     2,
       4,     4,     6,     6,     4,     1,     2,     1,     1,     1,
       1,     1,     1,     1,     3,     1,     1,     1,     1,     2,
       1,     4,     4,     1,     1,     1,     1,     1,     0,     3,
       3,     3,     3,     1,     0,     1,     3,     1,     0,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       2,     2,     2,     2,     2,     2,     3,     3,     3,     3,
       3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     1,     1,     8,     1,     0,     1,     2,     4,     3,
       0,     7,     7,     2,     2,     2,     3,     3,     4,     4,
       2,     1,     4,     1,     1,     1,     1,     2,     2,     1,
       3,     3,     3,     1,     1,     7,     1,     0,     3,     1,
       0,     1,     3,     4,     4,     3,     4,     3,     6,     2,
       0,     1,     1,     1,     1,     1,     1,     2,     3,     3,
       4,     4,     3,     1,     1,     1
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint8 yydefact[] =
{
       0,     0,   148,   146,   147,   142,   143,    76,     0,   173,
     174,   175,   176,   213,   214,   215,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   150,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    74,    73,     0,   144,   145,     0,     0,     5,
       8,    39,    38,    35,    36,    34,    33,    32,    31,    30,
      26,    27,    28,    29,    25,    23,    24,    40,     0,    70,
      72,    20,     0,    71,   190,     9,    10,    11,    21,     0,
       0,   171,    14,    15,    12,    13,    16,    17,    37,    18,
      19,    22,   205,   206,   108,    41,   151,   152,   119,    97,
      98,     0,     0,    77,    91,     0,     0,     0,     0,     0,
      95,    96,     0,     0,     0,    79,    85,    87,    88,    89,
      92,    93,   100,    90,    49,     0,    67,    69,     0,     0,
       0,   183,   184,     0,     0,   187,     0,     0,   191,     0,
       0,     0,   191,     0,     0,     0,     0,   149,     0,     0,
       0,     0,   177,     0,     0,     0,     0,     0,     0,   178,
       1,     0,     2,     6,     7,    75,     0,     0,   114,   103,
     179,   104,   165,   189,     0,   207,   163,   164,     0,   170,
     107,     0,    86,   105,   106,    99,     0,     0,    78,   132,
     134,   133,   135,   131,   130,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    51,    68,
       0,     0,     0,   181,   182,     0,   186,     0,     0,     0,
       0,   195,     0,     0,   167,   209,   197,     0,    66,     0,
       0,     0,    63,     0,     0,     0,    46,    44,    45,     0,
     166,   208,    42,     3,     0,     0,   117,     0,   113,   115,
       0,   188,     0,   212,    84,     0,    94,    80,    81,   126,
     127,   125,   137,   136,   138,   139,   140,   141,   129,   128,
     120,   121,   122,   123,   124,   111,   110,   100,   109,     0,
       0,    48,     0,     0,     0,     0,     0,     0,     0,     0,
     192,    43,   196,   169,   211,   204,   203,   202,   201,   200,
       0,     0,     0,    62,     0,     0,    58,     0,    60,     0,
     168,   210,   193,   194,   112,   118,   180,   172,     0,     0,
     101,   102,    50,    47,     0,   160,   154,   156,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    64,    65,
       0,    59,    61,     0,   116,    83,    82,     0,     0,   157,
       0,     0,     0,     0,    53,    52,   199,   198,    55,    56,
      57,    54,     0,     0,     0,   161,   162,   185,     0,   153
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    47,   162,    48,    49,    50,    51,    52,    53,    54,
      55,    56,   218,   293,    57,    58,    59,    60,    61,    62,
     315,   316,    63,   241,   242,    64,    65,    66,    67,    68,
      69,    70,    71,    72,   169,   116,   170,   182,   181,   117,
     118,   171,   257,   258,   259,   119,   120,   121,    73,   122,
     148,   123,    75,   335,   336,   337,   339,    76,    77,    78,
      79,    80,    81,   173,    82,    83,   133,    84,   225,    85,
     174,   139,    86,    87,    88,    89,    90,   345,   309,    91,
      92,    93,    94
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -287
static const yytype_int16 yypact[] =
{
    1808,   -37,  -287,  -287,  -287,  -287,  -287,   410,    10,  -287,
    -287,  -287,  -287,  -287,  -287,  -287,    66,   -37,   805,    10,
      10,    71,    71,    10,   805,   805,    10,    10,     7,    10,
      71,    10,    10,    10,    10,    10,    10,   805,   805,   805,
       3,   805,  -287,  -287,    10,  -287,  -287,    18,   895,  -287,
    -287,  -287,  -287,  -287,  -287,  -287,  -287,  -287,  -287,  -287,
    -287,  -287,  -287,  -287,  -287,  -287,  -287,  -287,  1869,  -287,
    -287,  -287,   -37,  -287,   547,  -287,  -287,  -287,  -287,   -37,
     -37,   651,  -287,  -287,  -287,  -287,  -287,  -287,  -287,  -287,
    -287,  -287,  -287,  -287,   805,  -287,  -287,  -287,  -287,  -287,
    -287,    37,    10,  -287,  -287,   805,   805,    10,   805,   805,
    -287,    53,   805,   805,   805,  1903,   -42,  -287,  -287,  -287,
    -287,  -287,    13,  -287,   -18,   -37,  -287,  -287,   435,   -37,
     -37,  -287,  -287,   -37,   -37,    10,   435,   435,  -287,   703,
     586,    10,   268,   -13,   -47,   -37,   -37,  -287,   -37,    10,
     -37,   -37,  -287,   435,   435,   435,    10,   268,   435,  -287,
    -287,   -37,  -287,  -287,  -287,  -287,   796,   796,   684,   494,
    -287,  -287,  -287,    -7,   -37,  -287,  -287,  -287,   805,    -7,
     494,   -37,  -287,  -287,  -287,  -287,     6,   745,   494,  -287,
     494,   494,    42,  -287,  -287,  1920,    17,   805,   805,   805,
     805,   805,   805,   805,   805,   805,   805,   805,   805,   805,
     805,   805,   805,    10,    10,   805,   805,   805,    27,  -287,
    1808,  1808,  1808,  -287,  -287,   -37,     1,  1808,  1808,    10,
     435,  -287,   -37,   268,  -287,  -287,  -287,   153,  -287,  1808,
    1808,    12,  -287,    28,    10,  1808,  -287,  -287,  -287,   268,
    -287,  -287,  -287,  -287,   -37,   -37,  -287,    26,    55,  -287,
     796,  -287,  1866,  -287,    56,    50,  -287,  -287,  -287,   244,
     878,   961,   298,   298,     5,     5,     5,     5,    24,    24,
      42,    42,  -287,  -287,  -287,   -42,  -287,   -54,  -287,  1885,
    1941,   494,   153,   -37,   978,  1144,  1144,  1808,  1227,  1310,
    -287,  -287,  -287,  -287,  -287,  -287,  -287,  -287,  -287,    60,
    1393,  1476,    10,  -287,   805,     8,  -287,    20,  -287,  1559,
    -287,  -287,  -287,  -287,  -287,   796,  -287,  -287,    72,    67,
    -287,  -287,  -287,  -287,   805,   104,   112,  -287,   -37,   114,
     115,  1642,   -37,   -37,    10,   -37,   -37,   -37,  -287,   494,
     -37,  -287,  -287,   -37,  -287,  -287,  -287,   435,   116,  -287,
    1808,   -37,   -37,   -37,  -287,  -287,  -287,  -287,  -287,  -287,
    -287,  -287,  1808,   -37,  1725,  -287,  -287,  -287,  1061,  -287
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -287,  -287,  -287,  -122,   -41,    77,  -287,  -287,  -287,  -287,
    -287,  -287,  -287,  -287,  -287,  -287,  -287,  -287,  -287,  -287,
    -287,  -175,  -287,  -287,  -162,  -287,  -287,  -287,  -287,  -287,
      49,  -287,  -287,  -287,   332,   -62,  -129,  -287,  -287,    51,
     -61,  -287,  -287,  -287,  -171,  -287,  -287,  -287,  -287,     0,
    -287,  -287,  -287,  -287,  -287,  -181,  -286,  -287,  -287,  -287,
    -287,   -73,   -99,    76,  -287,  -287,    -5,  -287,  -287,  -287,
    -287,   -25,  -287,  -238,  -287,  -287,  -287,  -287,  -134,  -287,
    -287,   -69,  -287
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -161
static const yytype_int16 yytable[] =
{
      74,   172,   184,   143,   144,   175,   318,   163,   124,     2,
     340,   232,   237,     2,     2,   215,     2,   134,   160,   129,
     130,    42,    43,   135,   229,   145,   138,   140,   142,   138,
     213,   146,   147,   149,   150,   151,   152,   254,   255,   256,
     157,   216,   156,     2,   159,    42,    43,   217,    74,   358,
      95,     9,    10,    11,    12,   350,    96,    97,   229,     2,
      98,    99,   100,   141,   260,   126,   127,   214,    74,   234,
      42,    43,   229,   235,   214,   131,   132,   318,    42,    43,
     267,   268,   215,   312,   250,   167,   292,   314,   251,    36,
     206,   207,   208,   209,   324,   210,   211,   212,   294,   295,
     296,   183,   186,   101,   102,   298,   299,   189,   216,    44,
     226,   208,   209,   329,   210,   211,   212,   310,   311,   104,
     344,   165,   125,   319,    42,    43,   325,   328,   176,   177,
     338,   326,   210,   211,   212,   138,   355,   356,   308,   334,
     351,   233,   361,   362,   373,   164,   112,   113,   114,   243,
     348,   285,   286,   185,   354,   359,   249,   179,   332,     2,
     303,     0,     0,     0,   304,     0,   305,     9,    10,    11,
      12,     0,     0,     0,   219,   341,   320,   220,   221,   222,
     321,     0,   223,   224,     0,   227,   228,     0,     0,   231,
       0,     0,   236,   308,   238,   239,   256,   240,     0,   244,
     245,   306,   246,   247,   248,    36,     0,   252,     0,     0,
     253,     0,     0,   287,   288,     0,     0,     0,     0,     0,
      74,    74,    74,   261,     0,    44,     0,    74,    74,   300,
     263,     0,     0,     0,     0,     0,     0,   307,   374,    74,
      74,     0,     0,     0,   317,    74,     0,     0,     0,     0,
     378,     0,     0,   163,   163,   163,     0,   163,   163,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   163,
     163,     0,     0,     0,   297,     0,     0,     0,   163,   301,
       0,   302,     9,    10,    11,    12,    13,    14,    15,     0,
     313,     0,   307,     0,    74,    74,    74,    74,    74,    74,
     163,     0,     0,   322,   323,     0,     0,     0,     0,     0,
      74,    74,   243,     0,     0,   317,     0,     0,     0,    74,
      36,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   163,   210,   211,   212,   163,     0,   115,
      44,    74,   333,     0,   366,     0,     0,     0,     0,     0,
     128,     0,     0,     0,     0,     0,   136,   137,     0,     0,
      74,     0,     0,     0,     0,     0,   352,     0,     0,   153,
     154,   155,    74,   158,    74,     0,     0,     0,    74,   202,
     203,   204,   205,   206,   207,   208,   209,   360,   210,   211,
     212,   364,   365,     0,   367,   368,   369,     0,     0,   370,
       0,     0,   371,     0,     0,     0,   372,     0,     0,     0,
     375,   376,   377,    96,    97,     0,     2,    98,    99,   100,
       0,     0,   379,     0,     0,     0,   180,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   187,   188,     0,
     190,   191,     0,   192,   193,   194,   195,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     101,   102,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   230,   103,     0,     0,     0,   104,     0,     0,   105,
       0,     0,     0,   106,     0,     0,     0,   107,     0,     0,
       0,   108,   109,    42,    43,     0,     0,   110,   111,     0,
       0,     0,     0,   112,   113,   114,     0,     0,     0,     0,
     262,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,     0,   210,   211,   212,     0,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,     0,   289,   290,   291,
      96,    97,     0,     2,    98,    99,   100,     0,     0,     0,
       0,     9,    10,    11,    12,    13,    14,    15,     0,     0,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   166,   210,   211,   212,     0,     0,    96,
      97,     0,     2,    98,    99,   100,     0,   101,   102,    36,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   167,   104,   168,     0,     0,     0,     0,    44,
       0,     0,     0,     0,   107,     0,     0,     0,   108,   109,
       0,     0,     0,     0,   110,   111,   101,   102,     0,     0,
     112,   113,   114,     0,    42,    43,   349,     0,     0,     0,
       0,     0,   104,   168,    96,    97,     0,     2,    98,    99,
     100,     0,     0,   107,     0,     0,   357,   108,   109,     0,
       0,     0,     0,   110,   111,     0,     0,     0,     0,   112,
     113,   114,     0,     0,     0,     0,     0,    96,    97,     0,
       2,    98,    99,   100,     0,     0,     0,     0,     0,     0,
       0,   101,   102,     0,     0,     0,    96,    97,     0,     2,
      98,    99,   100,     0,     0,     0,     0,   104,   168,     0,
     178,     0,     0,     0,     0,     0,     0,     0,   107,     0,
       0,     0,   108,   109,   101,   102,     0,     0,   110,   111,
       0,     0,     0,     0,   112,   113,   114,     0,     0,     0,
     104,   168,     0,   101,   102,  -118,     0,     0,     0,     0,
       0,   107,     0,     0,     0,   108,   109,     0,     0,   104,
       0,   110,   111,     0,   229,     0,     0,   112,   113,   114,
     107,     0,     0,     0,   108,   109,     0,     0,     0,     0,
     110,   111,     0,     0,     0,     0,   112,   113,   114,    96,
      97,     0,     2,    98,    99,   100,     0,     0,    96,    97,
       0,     2,    98,    99,   100,   264,   265,     0,     0,     0,
       0,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,     0,   210,   211,   212,     0,     0,
       0,     0,     0,     0,     0,     0,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   101,   102,     0,     0,     0,
       0,     0,   104,   168,     0,     0,     0,     0,     0,     0,
       0,   104,     0,   107,     0,     0,     0,   108,   109,     0,
       0,     0,   107,   110,   111,     0,   108,   109,     0,   112,
     113,   114,   110,   111,     0,    -4,     1,     0,   112,   113,
     114,     2,     0,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,     0,     0,     0,    21,    22,    23,    24,    25,     0,
      26,     0,    27,   161,    28,    29,    30,    31,    32,     0,
      33,    34,     0,    35,     0,     0,     0,    36,    37,    38,
      39,    40,    41,    42,    43,     0,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,    44,   210,   211,
     212,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,     0,    45,    46,     2,     0,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,  -155,   334,  -155,    21,    22,    23,
      24,    25,     0,    26,     0,    27,     0,    28,    29,    30,
      31,    32,     0,    33,    34,     0,    35,     0,     0,     0,
      36,    37,    38,    39,    40,    41,    42,    43,     0,     0,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
      44,   210,   211,   212,     0,     0,     0,     0,     0,     0,
       0,     0,     1,     0,     0,    45,    46,     2,     0,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,  -158,  -158,  -158,
      21,    22,    23,    24,    25,     0,    26,     0,    27,     0,
      28,    29,    30,    31,    32,     0,    33,    34,     0,    35,
       0,     0,     0,    36,    37,    38,    39,    40,    41,    42,
      43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     1,     0,     0,    45,    46,
       2,     0,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
     338,     0,  -160,    21,    22,    23,    24,    25,     0,    26,
       0,    27,     0,    28,    29,    30,    31,    32,     0,    33,
      34,     0,    35,     0,     0,     0,    36,    37,    38,    39,
      40,    41,    42,    43,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    44,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
       0,    45,    46,     2,     0,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,     0,     0,     0,    21,    22,    23,    24,
      25,   342,    26,     0,    27,     0,    28,    29,    30,    31,
      32,     0,    33,    34,     0,    35,     0,     0,     0,    36,
      37,    38,    39,    40,    41,    42,    43,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     1,     0,     0,    45,    46,     2,     0,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,     0,     0,     0,    21,
      22,    23,    24,    25,   343,    26,     0,    27,     0,    28,
      29,    30,    31,    32,     0,    33,    34,     0,    35,     0,
       0,     0,    36,    37,    38,    39,    40,    41,    42,    43,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    44,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,     0,     0,    45,    46,     2,
       0,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,     0,
       0,     0,    21,    22,    23,    24,    25,     0,    26,     0,
      27,     0,    28,    29,    30,    31,    32,   346,    33,    34,
       0,    35,     0,     0,     0,    36,    37,    38,    39,    40,
      41,    42,    43,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    44,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     1,     0,     0,
      45,    46,     2,     0,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,     0,     0,     0,    21,    22,    23,    24,    25,
       0,    26,     0,    27,     0,    28,    29,    30,    31,    32,
     347,    33,    34,     0,    35,     0,     0,     0,    36,    37,
      38,    39,    40,    41,    42,    43,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    44,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       1,     0,     0,    45,    46,     2,     0,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,     0,     0,     0,    21,    22,
      23,    24,    25,     0,    26,     0,    27,     0,    28,    29,
      30,    31,    32,     0,    33,    34,     0,    35,   353,     0,
       0,    36,    37,    38,    39,    40,    41,    42,    43,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    44,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     1,     0,     0,    45,    46,     2,     0,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,     0,     0,
       0,    21,    22,    23,    24,    25,   363,    26,     0,    27,
       0,    28,    29,    30,    31,    32,     0,    33,    34,     0,
      35,     0,     0,     0,    36,    37,    38,    39,    40,    41,
      42,    43,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     1,     0,     0,    45,
      46,     2,     0,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,     0,     0,  -159,    21,    22,    23,    24,    25,     0,
      26,     0,    27,     0,    28,    29,    30,    31,    32,     0,
      33,    34,     0,    35,     0,     0,     0,    36,    37,    38,
      39,    40,    41,    42,    43,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    44,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     1,
       0,     0,    45,    46,     2,     0,     3,     4,     5,     6,
       7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,     0,     0,     0,    21,    22,    23,
      24,    25,     0,    26,     0,    27,     0,    28,    29,    30,
      31,    32,     0,    33,    34,     0,    35,     0,     0,     0,
      36,    37,    38,    39,    40,    41,    42,    43,     0,     0,
       1,     0,     0,     0,     0,     2,     0,     0,     0,     0,
      44,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    45,    46,     0,    21,    22,
      23,    24,    25,     0,    26,     0,    27,     0,    28,    29,
      30,    31,    32,     0,    33,    34,     0,    35,     0,     0,
       0,    36,    37,    38,    39,    40,    41,    42,    43,     0,
       0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
       0,    44,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   330,   210,   211,   212,     0,
       0,   197,   198,   199,   200,   201,   202,   203,   204,   205,
     206,   207,   208,   209,   196,   210,   211,   212,     0,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,     0,   210,   211,   212,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,     0,
     210,   211,   212,     0,     0,     0,   266,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
       0,   210,   211,   212,     0,     0,     0,   331
};

static const yytype_int16 yycheck[] =
{
       0,    74,   101,    28,    29,    74,   244,    48,     8,     6,
     296,   140,    59,     6,     6,    69,     6,    22,     0,    19,
      20,    58,    59,    23,    71,    30,    26,    27,    28,    29,
      72,    31,    32,    33,    34,    35,    36,   166,   167,   168,
      40,    95,    39,     6,    44,    58,    59,    65,    48,   335,
       1,    14,    15,    16,    17,    47,     3,     4,    71,     6,
       7,     8,     9,    56,    71,    16,    17,    61,    68,   142,
      58,    59,    71,   142,    61,     4,     5,   315,    58,    59,
      63,    64,    69,    71,   157,    65,    59,    59,   157,    52,
      85,    86,    87,    88,    68,    90,    91,    92,   220,   221,
     222,   101,   102,    50,    51,   227,   228,   107,    95,    72,
     135,    87,    88,    63,    90,    91,    92,   239,   240,    66,
      60,    72,    56,   245,    58,    59,    71,    71,    79,    80,
      26,   260,    90,    91,    92,   135,    64,    70,   237,    27,
     315,   141,    28,    28,    28,    68,    93,    94,    95,   149,
     312,   213,   213,   102,   325,   336,   156,    81,   292,     6,
     233,    -1,    -1,    -1,   233,    -1,    13,    14,    15,    16,
      17,    -1,    -1,    -1,   125,   297,   249,   128,   129,   130,
     249,    -1,   133,   134,    -1,   136,   137,    -1,    -1,   140,
      -1,    -1,   143,   292,   145,   146,   325,   148,    -1,   150,
     151,    48,   153,   154,   155,    52,    -1,   158,    -1,    -1,
     161,    -1,    -1,   213,   214,    -1,    -1,    -1,    -1,    -1,
     220,   221,   222,   174,    -1,    72,    -1,   227,   228,   229,
     181,    -1,    -1,    -1,    -1,    -1,    -1,   237,   360,   239,
     240,    -1,    -1,    -1,   244,   245,    -1,    -1,    -1,    -1,
     372,    -1,    -1,   294,   295,   296,    -1,   298,   299,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   310,
     311,    -1,    -1,    -1,   225,    -1,    -1,    -1,   319,   230,
      -1,   232,    14,    15,    16,    17,    18,    19,    20,    -1,
     241,    -1,   292,    -1,   294,   295,   296,   297,   298,   299,
     341,    -1,    -1,   254,   255,    -1,    -1,    -1,    -1,    -1,
     310,   311,   312,    -1,    -1,   315,    -1,    -1,    -1,   319,
      52,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,   374,    90,    91,    92,   378,    -1,     7,
      72,   341,   293,    -1,   344,    -1,    -1,    -1,    -1,    -1,
      18,    -1,    -1,    -1,    -1,    -1,    24,    25,    -1,    -1,
     360,    -1,    -1,    -1,    -1,    -1,   317,    -1,    -1,    37,
      38,    39,   372,    41,   374,    -1,    -1,    -1,   378,    81,
      82,    83,    84,    85,    86,    87,    88,   338,    90,    91,
      92,   342,   343,    -1,   345,   346,   347,    -1,    -1,   350,
      -1,    -1,   353,    -1,    -1,    -1,   357,    -1,    -1,    -1,
     361,   362,   363,     3,     4,    -1,     6,     7,     8,     9,
      -1,    -1,   373,    -1,    -1,    -1,    94,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,    -1,
     108,   109,    -1,   111,   112,   113,   114,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      50,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   139,    62,    -1,    -1,    -1,    66,    -1,    -1,    69,
      -1,    -1,    -1,    73,    -1,    -1,    -1,    77,    -1,    -1,
      -1,    81,    82,    58,    59,    -1,    -1,    87,    88,    -1,
      -1,    -1,    -1,    93,    94,    95,    -1,    -1,    -1,    -1,
     178,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,    -1,   215,   216,   217,
       3,     4,    -1,     6,     7,     8,     9,    -1,    -1,    -1,
      -1,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    36,    90,    91,    92,    -1,    -1,     3,
       4,    -1,     6,     7,     8,     9,    -1,    50,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    65,    66,    67,    -1,    -1,    -1,    -1,    72,
      -1,    -1,    -1,    -1,    77,    -1,    -1,    -1,    81,    82,
      -1,    -1,    -1,    -1,    87,    88,    50,    51,    -1,    -1,
      93,    94,    95,    -1,    58,    59,   314,    -1,    -1,    -1,
      -1,    -1,    66,    67,     3,     4,    -1,     6,     7,     8,
       9,    -1,    -1,    77,    -1,    -1,   334,    81,    82,    -1,
      -1,    -1,    -1,    87,    88,    -1,    -1,    -1,    -1,    93,
      94,    95,    -1,    -1,    -1,    -1,    -1,     3,     4,    -1,
       6,     7,     8,     9,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    50,    51,    -1,    -1,    -1,     3,     4,    -1,     6,
       7,     8,     9,    -1,    -1,    -1,    -1,    66,    67,    -1,
      69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,
      -1,    -1,    81,    82,    50,    51,    -1,    -1,    87,    88,
      -1,    -1,    -1,    -1,    93,    94,    95,    -1,    -1,    -1,
      66,    67,    -1,    50,    51,    71,    -1,    -1,    -1,    -1,
      -1,    77,    -1,    -1,    -1,    81,    82,    -1,    -1,    66,
      -1,    87,    88,    -1,    71,    -1,    -1,    93,    94,    95,
      77,    -1,    -1,    -1,    81,    82,    -1,    -1,    -1,    -1,
      87,    88,    -1,    -1,    -1,    -1,    93,    94,    95,     3,
       4,    -1,     6,     7,     8,     9,    -1,    -1,     3,     4,
      -1,     6,     7,     8,     9,    70,    71,    -1,    -1,    -1,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    50,    51,    -1,    -1,    -1,
      -1,    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    66,    -1,    77,    -1,    -1,    -1,    81,    82,    -1,
      -1,    -1,    77,    87,    88,    -1,    81,    82,    -1,    93,
      94,    95,    87,    88,    -1,     0,     1,    -1,    93,    94,
      95,     6,    -1,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    -1,    -1,    29,    30,    31,    32,    33,    -1,
      35,    -1,    37,    38,    39,    40,    41,    42,    43,    -1,
      45,    46,    -1,    48,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    88,    72,    90,    91,
      92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,    -1,    87,    88,     6,    -1,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    35,    -1,    37,    -1,    39,    40,    41,
      42,    43,    -1,    45,    46,    -1,    48,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    -1,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      72,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,    -1,    87,    88,     6,    -1,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    35,    -1,    37,    -1,
      39,    40,    41,    42,    43,    -1,    45,    46,    -1,    48,
      -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    87,    88,
       6,    -1,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    -1,    28,    29,    30,    31,    32,    33,    -1,    35,
      -1,    37,    -1,    39,    40,    41,    42,    43,    -1,    45,
      46,    -1,    48,    -1,    -1,    -1,    52,    53,    54,    55,
      56,    57,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
      -1,    87,    88,     6,    -1,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    -1,    -1,    29,    30,    31,    32,
      33,    34,    35,    -1,    37,    -1,    39,    40,    41,    42,
      43,    -1,    45,    46,    -1,    48,    -1,    -1,    -1,    52,
      53,    54,    55,    56,    57,    58,    59,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     1,    -1,    -1,    87,    88,     6,    -1,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    -1,    -1,    -1,    29,
      30,    31,    32,    33,    34,    35,    -1,    37,    -1,    39,
      40,    41,    42,    43,    -1,    45,    46,    -1,    48,    -1,
      -1,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,    -1,    87,    88,     6,
      -1,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      -1,    -1,    29,    30,    31,    32,    33,    -1,    35,    -1,
      37,    -1,    39,    40,    41,    42,    43,    44,    45,    46,
      -1,    48,    -1,    -1,    -1,    52,    53,    54,    55,    56,
      57,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
      87,    88,     6,    -1,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
      24,    25,    -1,    -1,    -1,    29,    30,    31,    32,    33,
      -1,    35,    -1,    37,    -1,    39,    40,    41,    42,    43,
      44,    45,    46,    -1,    48,    -1,    -1,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       1,    -1,    -1,    87,    88,     6,    -1,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    -1,    -1,    -1,    29,    30,
      31,    32,    33,    -1,    35,    -1,    37,    -1,    39,    40,
      41,    42,    43,    -1,    45,    46,    -1,    48,    49,    -1,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     1,    -1,    -1,    87,    88,     6,    -1,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    -1,    -1,
      -1,    29,    30,    31,    32,    33,    34,    35,    -1,    37,
      -1,    39,    40,    41,    42,    43,    -1,    45,    46,    -1,
      48,    -1,    -1,    -1,    52,    53,    54,    55,    56,    57,
      58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    87,
      88,     6,    -1,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    -1,    28,    29,    30,    31,    32,    33,    -1,
      35,    -1,    37,    -1,    39,    40,    41,    42,    43,    -1,
      45,    46,    -1,    48,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    58,    59,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,
      -1,    -1,    87,    88,     6,    -1,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    -1,    -1,    -1,    29,    30,    31,
      32,    33,    -1,    35,    -1,    37,    -1,    39,    40,    41,
      42,    43,    -1,    45,    46,    -1,    48,    -1,    -1,    -1,
      52,    53,    54,    55,    56,    57,    58,    59,    -1,    -1,
       1,    -1,    -1,    -1,    -1,     6,    -1,    -1,    -1,    -1,
      72,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    87,    88,    -1,    29,    30,
      31,    32,    33,    -1,    35,    -1,    37,    -1,    39,    40,
      41,    42,    43,    -1,    45,    46,    -1,    48,    -1,    -1,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,
      -1,    72,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    88,    70,    90,    91,    92,    -1,
      -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    71,    90,    91,    92,    -1,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    -1,    -1,    96,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    -1,    -1,    96
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,     1,     6,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    29,    30,    31,    32,    33,    35,    37,    39,    40,
      41,    42,    43,    45,    46,    48,    52,    53,    54,    55,
      56,    57,    58,    59,    72,    87,    88,    98,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   111,   112,   113,
     114,   115,   116,   119,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   145,   146,   149,   154,   155,   156,   157,
     158,   159,   161,   162,   164,   166,   169,   170,   171,   172,
     173,   176,   177,   178,   179,   127,     3,     4,     7,     8,
       9,    50,    51,    62,    66,    69,    73,    77,    81,    82,
      87,    88,    93,    94,    95,   131,   132,   136,   137,   142,
     143,   144,   146,   148,   146,    56,   127,   127,   131,   146,
     146,     4,     5,   163,   163,   146,   131,   131,   146,   168,
     146,    56,   146,   168,   168,   163,   146,   146,   147,   146,
     146,   146,   146,   131,   131,   131,    39,   146,   131,   146,
       0,    38,    99,   101,   102,   127,    36,    65,    67,   131,
     133,   138,   158,   160,   167,   178,   127,   127,    69,   160,
     131,   135,   134,   146,   159,   136,   146,   131,   131,   146,
     131,   131,   131,   131,   131,   131,    71,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      90,    91,    92,    72,    61,    69,    95,    65,   109,   127,
     127,   127,   127,   127,   127,   165,   168,   127,   127,    71,
     131,   127,   133,   146,   158,   178,   127,    59,   127,   127,
     127,   120,   121,   146,   127,   127,   127,   127,   127,   146,
     158,   178,   127,   127,   133,   133,   133,   139,   140,   141,
      71,   127,   131,   127,    70,    71,    96,    63,    64,   131,
     131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
     131,   131,   131,   131,   131,   132,   137,   146,   146,   131,
     131,   131,    59,   110,   100,   100,   100,   127,   100,   100,
     146,   127,   127,   158,   178,    13,    48,   146,   159,   175,
     100,   100,    71,   127,    59,   117,   118,   146,   170,   100,
     158,   178,   127,   127,    68,    71,   133,    70,    71,    63,
      70,    96,   175,   127,    27,   150,   151,   152,    26,   153,
     153,   100,    34,    34,    60,   174,    44,    44,   121,   131,
      47,   118,   127,    49,   141,    64,    70,   131,   153,   152,
     127,    28,    28,    34,   127,   127,   146,   127,   127,   127,
     127,   127,   127,    28,   100,   127,   127,   127,   100,   127
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, Location); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (yylocationp);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    YYLTYPE const * const yylocationp;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yylsp, yyrule)
    YYSTYPE *yyvsp;
    YYLTYPE *yylsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       , &(yylsp[(yyi + 1) - (yynrhs)])		       );
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, yylsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, yylocationp)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    YYLTYPE *yylocationp;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */



/* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;
/* Location data for the look-ahead symbol.  */
YYLTYPE yylloc;



/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
  
  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;

  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[2];

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
  yylsp = yyls;
#if YYLTYPE_IS_TRIVIAL
  /* Initialize the default location before parsing starts.  */
  yylloc.first_line   = yylloc.last_line   = 1;
  yylloc.first_column = yylloc.last_column = 0;
#endif

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;
	YYLTYPE *yyls1 = yyls;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
	YYSTACK_RELOCATE (yyls);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 116 "parser.y"
    { root_node = astnode_create_list((yyvsp[(1) - (2)].node)); }
    break;

  case 3:
#line 120 "parser.y"
    { ; }
    break;

  case 5:
#line 125 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 6:
#line 126 "parser.y"
    {
         if ((yyvsp[(1) - (2)].node) != NULL) { (yyval.node) = (yyvsp[(1) - (2)].node); astnode_add_sibling((yyval.node), (yyvsp[(2) - (2)].node)); }
         else { (yyval.node) = (yyvsp[(2) - (2)].node); }
        }
    break;

  case 7:
#line 133 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (2)].node); astnode_add_sibling((yyval.node), (yyvsp[(2) - (2)].node)); }
    break;

  case 8:
#line 134 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 9:
#line 138 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 10:
#line 139 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 11:
#line 140 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 12:
#line 141 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 13:
#line 142 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 14:
#line 143 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 15:
#line 144 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 16:
#line 145 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 17:
#line 146 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 18:
#line 147 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 19:
#line 148 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 20:
#line 149 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 21:
#line 150 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 22:
#line 151 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 23:
#line 152 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 24:
#line 153 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 25:
#line 154 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 26:
#line 155 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 27:
#line 156 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 28:
#line 157 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 29:
#line 158 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 30:
#line 159 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 31:
#line 160 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 32:
#line 161 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 33:
#line 162 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 34:
#line 163 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 35:
#line 164 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 36:
#line 165 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 37:
#line 166 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 38:
#line 167 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 39:
#line 168 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 40:
#line 169 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 41:
#line 170 "parser.y"
    { (yyval.node) = NULL; }
    break;

  case 42:
#line 174 "parser.y"
    { (yyval.node) = astnode_create_org((yyvsp[(2) - (3)].node), (yyloc)); }
    break;

  case 43:
#line 178 "parser.y"
    { (yyval.node) = astnode_create_align((yyvsp[(2) - (4)].node), (yyvsp[(3) - (4)].node), (yyloc)); }
    break;

  case 44:
#line 182 "parser.y"
    { (yyval.node) = astnode_create_warning((yyvsp[(2) - (3)].node), (yyloc)); }
    break;

  case 45:
#line 186 "parser.y"
    { (yyval.node) = astnode_create_error((yyvsp[(2) - (3)].node), (yyloc)); }
    break;

  case 46:
#line 190 "parser.y"
    { (yyval.node) = astnode_create_message((yyvsp[(2) - (3)].node), (yyloc)); }
    break;

  case 47:
#line 194 "parser.y"
    { (yyval.node) = astnode_create_label((yyvsp[(2) - (5)].node)->label, (yyvsp[(3) - (5)].node), (yyvsp[(4) - (5)].node), (yyloc)); }
    break;

  case 48:
#line 198 "parser.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); }
    break;

  case 49:
#line 199 "parser.y"
    { (yyval.node) = NULL; }
    break;

  case 50:
#line 203 "parser.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); }
    break;

  case 51:
#line 204 "parser.y"
    { (yyval.node) = NULL; }
    break;

  case 52:
#line 208 "parser.y"
    { (yyval.node) = astnode_create_while((yyvsp[(2) - (6)].node), (yyvsp[(4) - (6)].node), (yyloc)); }
    break;

  case 53:
#line 212 "parser.y"
    { (yyval.node) = astnode_create_rept((yyvsp[(2) - (6)].node), (yyvsp[(4) - (6)].node), (yyloc)); }
    break;

  case 54:
#line 216 "parser.y"
    { (yyval.node) = astnode_create_proc((yyvsp[(2) - (6)].node), (yyvsp[(4) - (6)].node), (yyloc)); }
    break;

  case 55:
#line 220 "parser.y"
    { (yyval.node) = astnode_create_struc_decl((yyvsp[(2) - (6)].node), (yyvsp[(4) - (6)].node), (yyloc)); }
    break;

  case 56:
#line 224 "parser.y"
    { (yyval.node) = astnode_create_union_decl((yyvsp[(2) - (6)].node), (yyvsp[(4) - (6)].node), (yyloc)); }
    break;

  case 57:
#line 228 "parser.y"
    { (yyval.node) = astnode_create_enum_decl((yyvsp[(2) - (6)].node), (yyvsp[(4) - (6)].node), (yyloc)); }
    break;

  case 58:
#line 232 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 59:
#line 233 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (2)].node); astnode_add_sibling((yyval.node), (yyvsp[(2) - (2)].node)); }
    break;

  case 60:
#line 237 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 61:
#line 238 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (2)].node); }
    break;

  case 62:
#line 242 "parser.y"
    { (yyval.node) = astnode_create_record_decl((yyvsp[(2) - (4)].node), (yyvsp[(3) - (4)].node), (yyloc)); }
    break;

  case 63:
#line 246 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 64:
#line 247 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (3)].node); astnode_add_sibling((yyval.node), (yyvsp[(3) - (3)].node)); }
    break;

  case 65:
#line 251 "parser.y"
    { (yyval.node) = astnode_create_bitfield_decl((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 66:
#line 255 "parser.y"
    { (yyval.node) = astnode_create_charmap((yyvsp[(2) - (3)].node), (yyloc)); }
    break;

  case 67:
#line 259 "parser.y"
    { (yyval.node) = astnode_create_dataseg(0, (yyloc)); }
    break;

  case 68:
#line 260 "parser.y"
    { (yyval.node) = astnode_create_dataseg(ZEROPAGE_FLAG, (yyloc)); }
    break;

  case 69:
#line 263 "parser.y"
    { (yyval.node) = astnode_create_codeseg((yyloc)); }
    break;

  case 70:
#line 267 "parser.y"
    { (yyval.node) = NULL; }
    break;

  case 71:
#line 271 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 72:
#line 275 "parser.y"
    { ; }
    break;

  case 73:
#line 276 "parser.y"
    { ; }
    break;

  case 74:
#line 280 "parser.y"
    { ; }
    break;

  case 75:
#line 284 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (2)].node); }
    break;

  case 76:
#line 288 "parser.y"
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (1)].mnemonic), IMPLIED_MODE, NULL, (yyloc)); }
    break;

  case 77:
#line 289 "parser.y"
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (2)].mnemonic), ACCUMULATOR_MODE, NULL, (yyloc)); }
    break;

  case 78:
#line 290 "parser.y"
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (3)].mnemonic), IMMEDIATE_MODE, (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 79:
#line 291 "parser.y"
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (2)].mnemonic), ABSOLUTE_MODE, (yyvsp[(2) - (2)].node), (yyloc)); }
    break;

  case 80:
#line 292 "parser.y"
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (4)].mnemonic), ABSOLUTE_X_MODE, (yyvsp[(2) - (4)].node), (yyloc)); }
    break;

  case 81:
#line 293 "parser.y"
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (4)].mnemonic), ABSOLUTE_Y_MODE, (yyvsp[(2) - (4)].node), (yyloc)); }
    break;

  case 82:
#line 294 "parser.y"
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (6)].mnemonic), PREINDEXED_INDIRECT_MODE, (yyvsp[(3) - (6)].node), (yyloc)); }
    break;

  case 83:
#line 295 "parser.y"
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (6)].mnemonic), POSTINDEXED_INDIRECT_MODE, (yyvsp[(3) - (6)].node), (yyloc)); }
    break;

  case 84:
#line 296 "parser.y"
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (4)].mnemonic), INDIRECT_MODE, (yyvsp[(3) - (4)].node), (yyloc)); }
    break;

  case 85:
#line 300 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 86:
#line 301 "parser.y"
    { (yyval.node) = astnode_create_sizeof((yyvsp[(2) - (2)].node), (yyloc)); }
    break;

  case 87:
#line 302 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 88:
#line 303 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 89:
#line 304 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 90:
#line 305 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 91:
#line 306 "parser.y"
    { (yyval.node) = astnode_create_pc((yyloc)); }
    break;

  case 92:
#line 307 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 93:
#line 308 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 94:
#line 309 "parser.y"
    { (yyval.node) = (yyvsp[(2) - (3)].node); }
    break;

  case 95:
#line 310 "parser.y"
    { (yyval.node) = astnode_create_forward_branch("+", (yyloc)); }
    break;

  case 96:
#line 311 "parser.y"
    { (yyval.node) = astnode_create_backward_branch("-", (yyloc)); }
    break;

  case 97:
#line 312 "parser.y"
    { (yyval.node) = astnode_create_forward_branch((yyvsp[(1) - (1)].ident), (yyloc)); }
    break;

  case 98:
#line 313 "parser.y"
    { (yyval.node) = astnode_create_backward_branch((yyvsp[(1) - (1)].ident), (yyloc)); }
    break;

  case 99:
#line 314 "parser.y"
    { (yyval.node) = astnode_create_mask((yyvsp[(2) - (2)].node), (yyloc)); }
    break;

  case 100:
#line 318 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 101:
#line 319 "parser.y"
    { (yyval.node) = astnode_create_index((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].node), (yyloc)); }
    break;

  case 102:
#line 320 "parser.y"
    { (yyval.node) = astnode_create_index((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].node), (yyloc)); }
    break;

  case 103:
#line 324 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 104:
#line 325 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 105:
#line 329 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 106:
#line 330 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 107:
#line 334 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 108:
#line 335 "parser.y"
    { (yyval.node) = NULL; }
    break;

  case 109:
#line 339 "parser.y"
    { (yyval.node) = astnode_create_scope((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 110:
#line 343 "parser.y"
    { (yyval.node) = astnode_create_dot((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 111:
#line 344 "parser.y"
    { (yyval.node) = astnode_create_dot((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 112:
#line 348 "parser.y"
    { (yyval.node) = astnode_create_struc((yyvsp[(2) - (3)].node), (yyloc)); }
    break;

  case 113:
#line 352 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 114:
#line 353 "parser.y"
    { (yyval.node) = NULL; }
    break;

  case 115:
#line 357 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 116:
#line 358 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (3)].node); astnode_add_sibling((yyval.node), (yyvsp[(3) - (3)].node)); }
    break;

  case 117:
#line 362 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 118:
#line 363 "parser.y"
    { (yyval.node) = astnode_create_null((yyloc)); }
    break;

  case 119:
#line 367 "parser.y"
    { (yyval.node) = astnode_create_local_id((yyvsp[(1) - (1)].ident), (yyloc)); }
    break;

  case 120:
#line 371 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(PLUS_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 121:
#line 372 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(MINUS_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 122:
#line 373 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(MUL_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 123:
#line 374 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(DIV_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 124:
#line 375 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(MOD_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 125:
#line 376 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(AND_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 126:
#line 377 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(OR_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 127:
#line 378 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(XOR_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 128:
#line 379 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(SHL_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 129:
#line 380 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(SHR_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 130:
#line 381 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(NEG_OPERATOR, (yyvsp[(2) - (2)].node), NULL, (yyloc)); }
    break;

  case 131:
#line 382 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(NOT_OPERATOR, (yyvsp[(2) - (2)].node), NULL, (yyloc)); }
    break;

  case 132:
#line 383 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(BANK_OPERATOR, (yyvsp[(2) - (2)].node), NULL, (yyloc)); }
    break;

  case 133:
#line 384 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(LO_OPERATOR, (yyvsp[(2) - (2)].node), NULL, (yyloc)); }
    break;

  case 134:
#line 385 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(HI_OPERATOR, (yyvsp[(2) - (2)].node), NULL, (yyloc)); }
    break;

  case 135:
#line 386 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(UMINUS_OPERATOR, (yyvsp[(2) - (2)].node), NULL, (yyloc)); }
    break;

  case 136:
#line 390 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(EQ_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 137:
#line 391 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(NE_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 138:
#line 392 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(GT_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 139:
#line 393 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(LT_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 140:
#line 394 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(GE_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 141:
#line 395 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(LE_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 142:
#line 399 "parser.y"
    { (yyval.node) = astnode_create_label((yyvsp[(1) - (1)].label), NULL, NULL, (yyloc)); }
    break;

  case 143:
#line 400 "parser.y"
    { (yyval.node) = astnode_create_local_label((yyvsp[(1) - (1)].label), (yyloc)); }
    break;

  case 144:
#line 401 "parser.y"
    { (yyval.node) = astnode_create_forward_branch_decl("+", (yyloc)); }
    break;

  case 145:
#line 402 "parser.y"
    { (yyval.node) = astnode_create_backward_branch_decl("-", (yyloc)); }
    break;

  case 146:
#line 403 "parser.y"
    { (yyval.node) = astnode_create_forward_branch_decl((yyvsp[(1) - (1)].ident), (yyloc)); }
    break;

  case 147:
#line 404 "parser.y"
    { (yyval.node) = astnode_create_backward_branch_decl((yyvsp[(1) - (1)].ident), (yyloc)); }
    break;

  case 148:
#line 408 "parser.y"
    { (yyval.node) = astnode_create_identifier((yyvsp[(1) - (1)].ident), (yyloc)); }
    break;

  case 149:
#line 412 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 150:
#line 413 "parser.y"
    { (yyval.node) = astnode_create_null((yyloc)); }
    break;

  case 151:
#line 417 "parser.y"
    { (yyval.node) = astnode_create_integer((yyvsp[(1) - (1)].integer), (yyloc)); }
    break;

  case 152:
#line 418 "parser.y"
    { (yyval.node) = astnode_create_string((yyvsp[(1) - (1)].string), (yyloc)); }
    break;

  case 153:
#line 422 "parser.y"
    { (yyval.node) = astnode_create_if((yyvsp[(2) - (8)].node), (yyvsp[(4) - (8)].node), (yyvsp[(5) - (8)].node), (yyvsp[(6) - (8)].node), (yyloc)); }
    break;

  case 154:
#line 426 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 155:
#line 427 "parser.y"
    { (yyval.node) = NULL; }
    break;

  case 156:
#line 431 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 157:
#line 432 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (2)].node); astnode_add_sibling((yyval.node), (yyvsp[(2) - (2)].node)); }
    break;

  case 158:
#line 436 "parser.y"
    { (yyval.node) = astnode_create_case((yyvsp[(2) - (4)].node), (yyvsp[(4) - (4)].node), (yyloc)); }
    break;

  case 159:
#line 440 "parser.y"
    { (yyval.node) = (yyvsp[(3) - (3)].node); }
    break;

  case 160:
#line 441 "parser.y"
    { (yyval.node) = NULL; }
    break;

  case 161:
#line 445 "parser.y"
    { (yyval.node) = astnode_create_ifdef((yyvsp[(2) - (7)].node), (yyvsp[(4) - (7)].node), (yyvsp[(5) - (7)].node), (yyloc)); }
    break;

  case 162:
#line 449 "parser.y"
    { (yyval.node) = astnode_create_ifndef((yyvsp[(2) - (7)].node), (yyvsp[(4) - (7)].node), (yyvsp[(5) - (7)].node), (yyloc)); }
    break;

  case 163:
#line 453 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (2)].node); }
    break;

  case 164:
#line 454 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (2)].node); }
    break;

  case 165:
#line 458 "parser.y"
    { (yyval.node) = astnode_create_var_decl(0, (yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node), (yyloc)); }
    break;

  case 166:
#line 459 "parser.y"
    { (yyval.node) = astnode_create_var_decl(ZEROPAGE_FLAG, (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 167:
#line 460 "parser.y"
    { (yyval.node) = astnode_create_var_decl(PUBLIC_FLAG, (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 168:
#line 461 "parser.y"
    { (yyval.node) = astnode_create_var_decl(ZEROPAGE_FLAG | PUBLIC_FLAG, (yyvsp[(3) - (4)].node), (yyvsp[(4) - (4)].node), (yyloc)); }
    break;

  case 169:
#line 462 "parser.y"
    { (yyval.node) = astnode_create_var_decl(PUBLIC_FLAG | ZEROPAGE_FLAG, (yyvsp[(3) - (4)].node), (yyvsp[(4) - (4)].node), (yyloc)); }
    break;

  case 170:
#line 466 "parser.y"
    { (yyval.node) = astnode_create_data((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node), (yyloc)); }
    break;

  case 171:
#line 467 "parser.y"
    { (yyval.node) = astnode_create_storage((yyvsp[(1) - (1)].node), NULL, (yyloc)); }
    break;

  case 172:
#line 468 "parser.y"
    { (yyval.node) = astnode_create_storage((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].node), (yyloc)); }
    break;

  case 173:
#line 472 "parser.y"
    { (yyval.node) = astnode_create_datatype(BYTE_DATATYPE, NULL, (yyloc)); }
    break;

  case 174:
#line 473 "parser.y"
    { (yyval.node) = astnode_create_datatype(CHAR_DATATYPE, NULL, (yyloc)); }
    break;

  case 175:
#line 474 "parser.y"
    { (yyval.node) = astnode_create_datatype(WORD_DATATYPE, NULL, (yyloc)); }
    break;

  case 176:
#line 475 "parser.y"
    { (yyval.node) = astnode_create_datatype(DWORD_DATATYPE, NULL, (yyloc)); }
    break;

  case 177:
#line 476 "parser.y"
    { (yyval.node) = astnode_create_datatype(USER_DATATYPE, (yyvsp[(2) - (2)].node), (yyloc)); }
    break;

  case 178:
#line 477 "parser.y"
    { (yyval.node) = astnode_create_datatype(USER_DATATYPE, (yyvsp[(2) - (2)].node), (yyloc)); }
    break;

  case 179:
#line 481 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 180:
#line 482 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (3)].node); astnode_add_sibling((yyval.node), (yyvsp[(3) - (3)].node)); }
    break;

  case 181:
#line 486 "parser.y"
    { (yyval.node) = astnode_create_incsrc((yyvsp[(2) - (3)].node), (yyloc)); handle_incsrc((yyval.node)); }
    break;

  case 182:
#line 490 "parser.y"
    { (yyval.node) = astnode_create_incbin((yyvsp[(2) - (3)].node), (yyloc)); handle_incbin((yyval.node)); }
    break;

  case 183:
#line 494 "parser.y"
    { (yyval.node) = astnode_create_string((yyvsp[(1) - (1)].string), (yyloc)); }
    break;

  case 184:
#line 495 "parser.y"
    { (yyval.node) = astnode_create_file_path((yyvsp[(1) - (1)].string), (yyloc)); }
    break;

  case 185:
#line 499 "parser.y"
    { (yyval.node) = astnode_create_macro_decl((yyvsp[(2) - (7)].node), (yyvsp[(3) - (7)].node), (yyvsp[(5) - (7)].node), (yyloc)); }
    break;

  case 186:
#line 503 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 187:
#line 504 "parser.y"
    { (yyval.node) = NULL; }
    break;

  case 188:
#line 508 "parser.y"
    { (yyval.node) = astnode_create_macro((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyloc)); }
    break;

  case 189:
#line 512 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 190:
#line 513 "parser.y"
    { (yyval.node) = NULL; }
    break;

  case 191:
#line 517 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 192:
#line 518 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (3)].node); astnode_add_sibling((yyval.node), (yyvsp[(3) - (3)].node)); }
    break;

  case 193:
#line 522 "parser.y"
    { (yyval.node) = astnode_create_equ((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].node), (yyloc)); }
    break;

  case 194:
#line 526 "parser.y"
    { (yyval.node) = astnode_create_assign((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].node), (yyloc)); }
    break;

  case 195:
#line 530 "parser.y"
    { (yyval.node) = astnode_create_equ((yyvsp[(2) - (3)].node), astnode_create_integer(0, (yyloc)), (yyloc)); }
    break;

  case 196:
#line 531 "parser.y"
    { (yyval.node) = astnode_create_equ((yyvsp[(2) - (4)].node), (yyvsp[(3) - (4)].node), (yyloc)); }
    break;

  case 197:
#line 535 "parser.y"
    { (yyval.node) = astnode_create_public((yyvsp[(2) - (3)].node), (yyloc)); }
    break;

  case 198:
#line 539 "parser.y"
    { (yyval.node) = astnode_create_extrn((yyvsp[(2) - (6)].node), (yyvsp[(4) - (6)].node), (yyvsp[(5) - (6)].node), (yyloc)); }
    break;

  case 199:
#line 543 "parser.y"
    { (yyval.node) = (yyvsp[(2) - (2)].node); }
    break;

  case 200:
#line 544 "parser.y"
    { (yyval.node) = NULL; }
    break;

  case 201:
#line 548 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 202:
#line 549 "parser.y"
    { (yyval.node) = astnode_create_datatype(USER_DATATYPE, (yyvsp[(1) - (1)].node), (yyloc)); }
    break;

  case 203:
#line 550 "parser.y"
    { (yyval.node) = astnode_create_integer(PROC_SYMBOL, (yyloc)); }
    break;

  case 204:
#line 551 "parser.y"
    { (yyval.node) = astnode_create_integer(LABEL_SYMBOL, (yyloc)); }
    break;

  case 205:
#line 555 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 206:
#line 556 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
    break;

  case 207:
#line 560 "parser.y"
    { (yyval.node) = astnode_create_var_decl(0, (yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node), (yyloc)); }
    break;

  case 208:
#line 561 "parser.y"
    { (yyval.node) = astnode_create_var_decl(ZEROPAGE_FLAG, (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 209:
#line 562 "parser.y"
    { (yyval.node) = astnode_create_var_decl(PUBLIC_FLAG, (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
    break;

  case 210:
#line 563 "parser.y"
    { (yyval.node) = astnode_create_var_decl(ZEROPAGE_FLAG | PUBLIC_FLAG, (yyvsp[(3) - (4)].node), (yyvsp[(4) - (4)].node), (yyloc)); }
    break;

  case 211:
#line 564 "parser.y"
    { (yyval.node) = astnode_create_var_decl(PUBLIC_FLAG | ZEROPAGE_FLAG, (yyvsp[(3) - (4)].node), (yyvsp[(4) - (4)].node), (yyloc)); }
    break;

  case 212:
#line 568 "parser.y"
    { (yyval.node) = astnode_create_storage((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyloc)); }
    break;

  case 213:
#line 572 "parser.y"
    { (yyval.node) = astnode_create_datatype(BYTE_DATATYPE, NULL, (yyloc)); }
    break;

  case 214:
#line 573 "parser.y"
    { (yyval.node) = astnode_create_datatype(WORD_DATATYPE, NULL, (yyloc)); }
    break;

  case 215:
#line 574 "parser.y"
    { (yyval.node) = astnode_create_datatype(DWORD_DATATYPE, NULL, (yyloc)); }
    break;


/* Line 1267 of yacc.c.  */
#line 3330 "parser.c"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (yymsg);
	  }
	else
	  {
	    yyerror (YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }

  yyerror_range[0] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, &yylloc);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[0] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;

      yyerror_range[0] = *yylsp;
      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, yylsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;

  yyerror_range[1] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the look-ahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, &yylloc);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, yylsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


#line 576 "parser.y"

/**
 * Takes care of switching to a new scanner input stream when a "incsrc" statement
 * has been encountered.
 * The current stream is pushed on a stack, and will be popped when EOF is reached
 * in the new stream.
 * @@param n A node of type INCSRC_NODE
 */
void handle_incsrc(astnode *n)
{
    char errs[512];
    /* Get the node which describes the file to include */
    astnode *file = astnode_get_child(n, 0);

    switch (astnode_get_type(file)) {
        case STRING_NODE:
        /* TODO: add path searching */
        case FILE_PATH_NODE:
        switch (yypushandrestart(file->string)) {
            case 0:
            /* Success */
            break;
            case 1:
            /* Failed to open file */
            sprintf(errs, "could not open '%s' for reading", file->string);
            yyerror(errs);
            break;
            case 2:
            /* Stack overflow */
            yyerror("Maximum include nesting level reached");
            break;
        }
        break;

        default: break;
    }
}

// TODO: This shouldn't be done here but rather in astproc module.

/**
 * Takes care of including the binary contents of the file specified by a parsed
 * "incbin" statement.
 * Calls yyerror() if the file can't be included for some reason.
 * @@param n A node of type INCBIN_NODE
 */
void handle_incbin(astnode *n)
{
    FILE *fp;
    unsigned char *data;
    int size;
    char errs[512];
    /* Get the node which describes the file to include */
    astnode *file = astnode_get_child(n, 0);
    const char *filename = file->string;

    switch (astnode_get_type(file)) {
        case STRING_NODE:
        /* TODO: add path searching */
        case FILE_PATH_NODE:
        /* Attempt to open file */
        fp = fopen(filename, "rb");
        if (!fp && (filename[0] != '/')) {
            /* Try search paths */
            /* ### copied from scanner.l -- generalize */
            int i;
            for (i = 0; i < xasm_args.include_path_count; ++i) {
                const char *include_path = xasm_args.include_paths[i];
                char *path = (char *)malloc(
                    strlen(include_path) + strlen("/") + strlen(filename) + 1);
                strcpy(path, include_path);
                strcat(path, "/");
                strcat(path, filename);
                fp = fopen(path, "rb");
                free(path);
                if (fp)
                    break;
            }
        }
        if (fp) {
            /* Get filesize */
            fseek(fp, 0, SEEK_END);
            size = ftell(fp);
            rewind(fp);
            if (size > 0) {
                /* Allocate buffer to hold file contents */
                data = (unsigned char *)malloc(size);
                /* Read file contents into buffer */
                fread(data, 1, size, fp);
                /* Insert binary node */
                astnode_add_sibling(n, astnode_create_binary(data, size, n->loc) );
            }
            /* Close file */
            fclose(fp);
        }
        else {
            /* Couldn't open file */
            sprintf(errs, "could not open '%s' for reading", file->string);
            yyerror(errs);
        }
        break;

        default: break;
    }
}

@


1.4
log
@ability to generate pure 6502 binary (--pure-binary switch)
@
text
@d210 1
a210 1
 * $Id: parser.y,v 1.11 2007/08/11 01:25:50 khansen Exp khansen $
d212 3
d258 1
a258 1
void yyerror(char *);   /* In lexer */
d260 1
a260 1
int yypushandrestart(char *);   /* In lexer */
d289 1
a289 1
#line 59 "parser.y"
d293 3
a295 3
    char *string;
    char *label;
    char *ident;
d299 1
a299 1
#line 297 "parser.c"
d324 1
a324 1
#line 322 "parser.c"
d700 22
a721 22
       0,   113,   113,   117,   118,   122,   123,   130,   131,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   171,   175,   179,   183,   187,   191,   195,   196,
     200,   201,   205,   209,   213,   217,   221,   225,   229,   230,
     234,   235,   239,   243,   244,   248,   252,   256,   257,   260,
     264,   268,   272,   273,   277,   281,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     315,   316,   317,   321,   322,   326,   327,   331,   332,   336,
     340,   341,   345,   349,   350,   354,   355,   359,   360,   364,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   387,   388,   389,   390,
     391,   392,   396,   397,   398,   399,   400,   401,   405,   409,
     410,   414,   415,   419,   423,   424,   428,   429,   433,   437,
     438,   442,   446,   450,   451,   455,   456,   457,   458,   459,
     463,   464,   465,   469,   470,   471,   472,   473,   474,   478,
     479,   483,   487,   491,   492,   496,   500,   501,   505,   509,
     510,   514,   515,   519,   523,   527,   528,   532,   536,   540,
     541,   545,   546,   547,   548,   552,   553,   557,   558,   559,
     560,   561,   565,   569,   570,   571
d2260 1
a2260 1
#line 113 "parser.y"
d2265 1
a2265 1
#line 117 "parser.y"
d2270 1
a2270 1
#line 122 "parser.y"
d2275 1
a2275 1
#line 123 "parser.y"
d2283 1
a2283 1
#line 130 "parser.y"
d2288 1
a2288 1
#line 131 "parser.y"
d2293 1
a2293 1
#line 135 "parser.y"
d2298 1
a2298 1
#line 136 "parser.y"
d2303 1
a2303 1
#line 137 "parser.y"
d2308 1
a2308 1
#line 138 "parser.y"
d2313 1
a2313 1
#line 139 "parser.y"
d2318 1
a2318 1
#line 140 "parser.y"
d2323 1
a2323 1
#line 141 "parser.y"
d2328 1
a2328 1
#line 142 "parser.y"
d2333 1
a2333 1
#line 143 "parser.y"
d2338 1
a2338 1
#line 144 "parser.y"
d2343 1
a2343 1
#line 145 "parser.y"
d2348 1
a2348 1
#line 146 "parser.y"
d2353 1
a2353 1
#line 147 "parser.y"
d2358 1
a2358 1
#line 148 "parser.y"
d2363 1
a2363 1
#line 149 "parser.y"
d2368 1
a2368 1
#line 150 "parser.y"
d2373 1
a2373 1
#line 151 "parser.y"
d2378 1
a2378 1
#line 152 "parser.y"
d2383 1
a2383 1
#line 153 "parser.y"
d2388 1
a2388 1
#line 154 "parser.y"
d2393 1
a2393 1
#line 155 "parser.y"
d2398 1
a2398 1
#line 156 "parser.y"
d2403 1
a2403 1
#line 157 "parser.y"
d2408 1
a2408 1
#line 158 "parser.y"
d2413 1
a2413 1
#line 159 "parser.y"
d2418 1
a2418 1
#line 160 "parser.y"
d2423 1
a2423 1
#line 161 "parser.y"
d2428 1
a2428 1
#line 162 "parser.y"
d2433 1
a2433 1
#line 163 "parser.y"
d2438 1
a2438 1
#line 164 "parser.y"
d2443 1
a2443 1
#line 165 "parser.y"
d2448 1
a2448 1
#line 166 "parser.y"
d2453 1
a2453 1
#line 167 "parser.y"
d2458 1
a2458 1
#line 171 "parser.y"
d2463 1
a2463 1
#line 175 "parser.y"
d2468 1
a2468 1
#line 179 "parser.y"
d2473 1
a2473 1
#line 183 "parser.y"
d2478 1
a2478 1
#line 187 "parser.y"
d2483 1
a2483 1
#line 191 "parser.y"
d2488 1
a2488 1
#line 195 "parser.y"
d2493 1
a2493 1
#line 196 "parser.y"
d2498 1
a2498 1
#line 200 "parser.y"
d2503 1
a2503 1
#line 201 "parser.y"
d2508 1
a2508 1
#line 205 "parser.y"
d2513 1
a2513 1
#line 209 "parser.y"
d2518 1
a2518 1
#line 213 "parser.y"
d2523 1
a2523 1
#line 217 "parser.y"
d2528 1
a2528 1
#line 221 "parser.y"
d2533 1
a2533 1
#line 225 "parser.y"
d2538 1
a2538 1
#line 229 "parser.y"
d2543 1
a2543 1
#line 230 "parser.y"
d2548 1
a2548 1
#line 234 "parser.y"
d2553 1
a2553 1
#line 235 "parser.y"
d2558 1
a2558 1
#line 239 "parser.y"
d2563 1
a2563 1
#line 243 "parser.y"
d2568 1
a2568 1
#line 244 "parser.y"
d2573 1
a2573 1
#line 248 "parser.y"
d2578 1
a2578 1
#line 252 "parser.y"
d2583 1
a2583 1
#line 256 "parser.y"
d2588 1
a2588 1
#line 257 "parser.y"
d2593 1
a2593 1
#line 260 "parser.y"
d2598 1
a2598 1
#line 264 "parser.y"
d2603 1
a2603 1
#line 268 "parser.y"
d2608 1
a2608 1
#line 272 "parser.y"
d2613 1
a2613 1
#line 273 "parser.y"
d2618 1
a2618 1
#line 277 "parser.y"
d2623 1
a2623 1
#line 281 "parser.y"
d2628 1
a2628 1
#line 285 "parser.y"
d2633 1
a2633 1
#line 286 "parser.y"
d2638 1
a2638 1
#line 287 "parser.y"
d2643 1
a2643 1
#line 288 "parser.y"
d2648 1
a2648 1
#line 289 "parser.y"
d2653 1
a2653 1
#line 290 "parser.y"
d2658 1
a2658 1
#line 291 "parser.y"
d2663 1
a2663 1
#line 292 "parser.y"
d2668 1
a2668 1
#line 293 "parser.y"
d2673 1
a2673 1
#line 297 "parser.y"
d2678 1
a2678 1
#line 298 "parser.y"
d2683 1
a2683 1
#line 299 "parser.y"
d2688 1
a2688 1
#line 300 "parser.y"
d2693 1
a2693 1
#line 301 "parser.y"
d2698 1
a2698 1
#line 302 "parser.y"
d2703 1
a2703 1
#line 303 "parser.y"
d2708 1
a2708 1
#line 304 "parser.y"
d2713 1
a2713 1
#line 305 "parser.y"
d2718 1
a2718 1
#line 306 "parser.y"
d2723 1
a2723 1
#line 307 "parser.y"
d2728 1
a2728 1
#line 308 "parser.y"
d2733 1
a2733 1
#line 309 "parser.y"
d2738 1
a2738 1
#line 310 "parser.y"
d2743 1
a2743 1
#line 311 "parser.y"
d2748 1
a2748 1
#line 315 "parser.y"
d2753 1
a2753 1
#line 316 "parser.y"
d2758 1
a2758 1
#line 317 "parser.y"
d2763 1
a2763 1
#line 321 "parser.y"
d2768 1
a2768 1
#line 322 "parser.y"
d2773 1
a2773 1
#line 326 "parser.y"
d2778 1
a2778 1
#line 327 "parser.y"
d2783 1
a2783 1
#line 331 "parser.y"
d2788 1
a2788 1
#line 332 "parser.y"
d2793 1
a2793 1
#line 336 "parser.y"
d2798 1
a2798 1
#line 340 "parser.y"
d2803 1
a2803 1
#line 341 "parser.y"
d2808 1
a2808 1
#line 345 "parser.y"
d2813 1
a2813 1
#line 349 "parser.y"
d2818 1
a2818 1
#line 350 "parser.y"
d2823 1
a2823 1
#line 354 "parser.y"
d2828 1
a2828 1
#line 355 "parser.y"
d2833 1
a2833 1
#line 359 "parser.y"
d2838 1
a2838 1
#line 360 "parser.y"
d2843 1
a2843 1
#line 364 "parser.y"
d2848 1
a2848 1
#line 368 "parser.y"
d2853 1
a2853 1
#line 369 "parser.y"
d2858 1
a2858 1
#line 370 "parser.y"
d2863 1
a2863 1
#line 371 "parser.y"
d2868 1
a2868 1
#line 372 "parser.y"
d2873 1
a2873 1
#line 373 "parser.y"
d2878 1
a2878 1
#line 374 "parser.y"
d2883 1
a2883 1
#line 375 "parser.y"
d2888 1
a2888 1
#line 376 "parser.y"
d2893 1
a2893 1
#line 377 "parser.y"
d2898 1
a2898 1
#line 378 "parser.y"
d2903 1
a2903 1
#line 379 "parser.y"
d2908 1
a2908 1
#line 380 "parser.y"
d2913 1
a2913 1
#line 381 "parser.y"
d2918 1
a2918 1
#line 382 "parser.y"
d2923 1
a2923 1
#line 383 "parser.y"
d2928 1
a2928 1
#line 387 "parser.y"
d2933 1
a2933 1
#line 388 "parser.y"
d2938 1
a2938 1
#line 389 "parser.y"
d2943 1
a2943 1
#line 390 "parser.y"
d2948 1
a2948 1
#line 391 "parser.y"
d2953 1
a2953 1
#line 392 "parser.y"
d2958 1
a2958 1
#line 396 "parser.y"
d2963 1
a2963 1
#line 397 "parser.y"
d2968 1
a2968 1
#line 398 "parser.y"
d2973 1
a2973 1
#line 399 "parser.y"
d2978 1
a2978 1
#line 400 "parser.y"
d2983 1
a2983 1
#line 401 "parser.y"
d2988 1
a2988 1
#line 405 "parser.y"
d2993 1
a2993 1
#line 409 "parser.y"
d2998 1
a2998 1
#line 410 "parser.y"
d3003 1
a3003 1
#line 414 "parser.y"
d3008 1
a3008 1
#line 415 "parser.y"
d3013 1
a3013 1
#line 419 "parser.y"
d3018 1
a3018 1
#line 423 "parser.y"
d3023 1
a3023 1
#line 424 "parser.y"
d3028 1
a3028 1
#line 428 "parser.y"
d3033 1
a3033 1
#line 429 "parser.y"
d3038 1
a3038 1
#line 433 "parser.y"
d3043 1
a3043 1
#line 437 "parser.y"
d3048 1
a3048 1
#line 438 "parser.y"
d3053 1
a3053 1
#line 442 "parser.y"
d3058 1
a3058 1
#line 446 "parser.y"
d3063 1
a3063 1
#line 450 "parser.y"
d3068 1
a3068 1
#line 451 "parser.y"
d3073 1
a3073 1
#line 455 "parser.y"
d3078 1
a3078 1
#line 456 "parser.y"
d3083 1
a3083 1
#line 457 "parser.y"
d3088 1
a3088 1
#line 458 "parser.y"
d3093 1
a3093 1
#line 459 "parser.y"
d3098 1
a3098 1
#line 463 "parser.y"
d3103 1
a3103 1
#line 464 "parser.y"
d3108 1
a3108 1
#line 465 "parser.y"
d3113 1
a3113 1
#line 469 "parser.y"
d3118 1
a3118 1
#line 470 "parser.y"
d3123 1
a3123 1
#line 471 "parser.y"
d3128 1
a3128 1
#line 472 "parser.y"
d3133 1
a3133 1
#line 473 "parser.y"
d3138 1
a3138 1
#line 474 "parser.y"
d3143 1
a3143 1
#line 478 "parser.y"
d3148 1
a3148 1
#line 479 "parser.y"
d3153 1
a3153 1
#line 483 "parser.y"
d3158 1
a3158 1
#line 487 "parser.y"
d3163 1
a3163 1
#line 491 "parser.y"
d3168 1
a3168 1
#line 492 "parser.y"
d3173 1
a3173 1
#line 496 "parser.y"
d3178 1
a3178 1
#line 500 "parser.y"
d3183 1
a3183 1
#line 501 "parser.y"
d3188 1
a3188 1
#line 505 "parser.y"
d3193 1
a3193 1
#line 509 "parser.y"
d3198 1
a3198 1
#line 510 "parser.y"
d3203 1
a3203 1
#line 514 "parser.y"
d3208 1
a3208 1
#line 515 "parser.y"
d3213 1
a3213 1
#line 519 "parser.y"
d3218 1
a3218 1
#line 523 "parser.y"
d3223 1
a3223 1
#line 527 "parser.y"
d3228 1
a3228 1
#line 528 "parser.y"
d3233 1
a3233 1
#line 532 "parser.y"
d3238 1
a3238 1
#line 536 "parser.y"
d3243 1
a3243 1
#line 540 "parser.y"
d3248 1
a3248 1
#line 541 "parser.y"
d3253 1
a3253 1
#line 545 "parser.y"
d3258 1
a3258 1
#line 546 "parser.y"
d3263 1
a3263 1
#line 547 "parser.y"
d3268 1
a3268 1
#line 548 "parser.y"
d3273 1
a3273 1
#line 552 "parser.y"
d3278 1
a3278 1
#line 553 "parser.y"
d3283 1
a3283 1
#line 557 "parser.y"
d3288 1
a3288 1
#line 558 "parser.y"
d3293 1
a3293 1
#line 559 "parser.y"
d3298 1
a3298 1
#line 560 "parser.y"
d3303 1
a3303 1
#line 561 "parser.y"
d3308 1
a3308 1
#line 565 "parser.y"
d3313 1
a3313 1
#line 569 "parser.y"
d3318 1
a3318 1
#line 570 "parser.y"
d3323 1
a3323 1
#line 571 "parser.y"
d3329 1
a3329 1
#line 3327 "parser.c"
d3549 1
a3549 1
#line 573 "parser.y"
@


1.3
log
@includepaths support (-I option)
@
text
@d123 11
a133 10
     SCOPE_OP = 312,
     HI_OP = 313,
     LO_OP = 314,
     NE_OP = 315,
     EQ_OP = 316,
     GE_OP = 317,
     LE_OP = 318,
     SHR_OP = 319,
     SHL_OP = 320,
     UMINUS = 321
d191 11
a201 10
#define SCOPE_OP 312
#define HI_OP 313
#define LO_OP 314
#define NE_OP 315
#define EQ_OP 316
#define GE_OP 317
#define LE_OP 318
#define SHR_OP 319
#define SHL_OP 320
#define UMINUS 321
d210 1
a210 1
 * $Id: parser.y,v 1.10 2007/07/22 13:34:38 khansen Exp khansen $
d212 3
d286 1
a286 1
#line 56 "parser.y"
d296 1
a296 1
#line 292 "parser.c"
d321 1
a321 1
#line 317 "parser.c"
d536 1
a536 1
#define YYFINAL  157
d538 1
a538 1
#define YYLAST   1993
d541 1
a541 1
#define YYNTOKENS  96
d543 1
a543 1
#define YYNNTS  82
d545 1
a545 1
#define YYNRULES  213
d547 1
a547 1
#define YYNSTATES  376
d551 1
a551 1
#define YYMAXUTOK   321
d560 1
a560 1
      57,     2,     2,     2,     2,     2,     2,     2,     2,     2,
d562 4
a565 4
       2,     2,     2,    92,     2,    72,    65,    91,    77,     2,
      94,    95,    89,    86,    70,    87,    71,    90,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    58,     2,
      81,    64,    80,     2,    59,    61,     2,     2,     2,     2,
d567 2
a568 2
       2,     2,     2,     2,     2,     2,     2,     2,    62,    63,
       2,    68,     2,    69,    76,     2,     2,     2,     2,     2,
d571 1
a571 1
       2,     2,     2,    66,    75,    67,    93,     2,     2,     2,
d590 2
a591 2
      55,    56,    60,    73,    74,    78,    79,    82,    83,    84,
      85,    88
d603 18
a620 18
      82,    85,    90,    94,    98,   102,   108,   111,   112,   115,
     116,   123,   130,   137,   144,   151,   158,   160,   163,   165,
     168,   173,   175,   179,   183,   187,   190,   194,   197,   199,
     201,   203,   205,   207,   210,   212,   215,   219,   222,   227,
     232,   239,   246,   251,   253,   256,   258,   260,   262,   264,
     266,   268,   270,   274,   276,   278,   280,   282,   285,   287,
     292,   297,   299,   301,   303,   305,   307,   308,   312,   316,
     320,   324,   326,   327,   329,   333,   335,   336,   338,   342,
     346,   350,   354,   358,   362,   366,   370,   374,   378,   381,
     384,   387,   390,   393,   396,   400,   404,   408,   412,   416,
     420,   422,   424,   426,   428,   430,   432,   434,   436,   437,
     439,   441,   450,   452,   453,   455,   458,   463,   467,   468,
     476,   484,   487,   490,   493,   497,   501,   506,   511,   514,
     516,   521,   523,   525,   527,   529,   532,   535,   537,   541,
     545,   549,   551,   553,   561,   563,   564,   568,   570,   571,
     573,   577,   582,   587,   591,   596,   600,   607,   610,   611,
     613,   615,   617,   619,   621,   623,   626,   630,   634,   639,
     644,   648,   650,   652
d626 66
a691 66
      97,     0,    -1,    99,    98,    -1,    38,   125,    -1,    -1,
     100,    -1,    99,   100,    -1,   124,   101,    -1,   101,    -1,
     147,    -1,   152,    -1,   153,    -1,   162,    -1,   164,    -1,
     159,    -1,   160,    -1,   167,    -1,   168,    -1,   170,    -1,
     171,    -1,   127,    -1,   154,    -1,   174,    -1,   121,    -1,
     122,    -1,   120,    -1,   112,    -1,   113,    -1,   114,    -1,
     117,    -1,   111,    -1,   110,    -1,   109,    -1,   106,    -1,
     105,    -1,   103,    -1,   104,    -1,   169,    -1,   102,    -1,
     123,    -1,     1,   125,    -1,    35,   166,   129,   125,    -1,
      54,   129,   125,    -1,    55,   129,   125,    -1,    53,   129,
     125,    -1,    13,   144,   107,   108,   125,    -1,    64,     3,
      -1,    -1,    58,   173,    -1,    -1,    33,   129,   125,    99,
      34,   125,    -1,    32,   129,   125,    99,    34,   125,    -1,
      48,   144,   125,    99,    49,   125,    -1,    42,   144,   125,
      99,    44,   125,    -1,    43,   145,   125,    99,    44,   125,
      -1,    46,   144,   125,   115,    47,   125,    -1,   116,    -1,
     115,   116,    -1,   168,    -1,   144,   125,    -1,    45,   144,
     118,   125,    -1,   119,    -1,   118,    70,   119,    -1,   144,
      58,   129,    -1,    41,   161,   125,    -1,    21,   125,    -1,
      21,    56,   125,    -1,    22,   125,    -1,   125,    -1,   143,
      -1,   126,    -1,    58,    -1,    57,    -1,   128,   125,    -1,
      12,    -1,    12,    61,    -1,    12,    72,   129,    -1,    12,
     129,    -1,    12,   129,    70,    62,    -1,    12,   129,    70,
      63,    -1,    12,    68,   129,    70,    62,    69,    -1,    12,
      68,   129,    69,    70,    63,    -1,    12,    68,   129,    69,
      -1,   130,    -1,    50,   132,    -1,   134,    -1,   135,    -1,
     140,    -1,   146,    -1,    65,    -1,   141,    -1,   142,    -1,
      94,   129,    95,    -1,    86,    -1,    87,    -1,     8,    -1,
       9,    -1,    51,   134,    -1,   144,    -1,   144,    68,   129,
      69,    -1,   144,    94,   129,    95,    -1,   129,    -1,   136,
      -1,   144,    -1,   157,    -1,   129,    -1,    -1,   144,    60,
     144,    -1,   130,    71,   135,    -1,   130,    71,   130,    -1,
      66,   137,    67,    -1,   138,    -1,    -1,   139,    -1,   138,
      70,   139,    -1,   131,    -1,    -1,     7,    -1,   129,    86,
     129,    -1,   129,    87,   129,    -1,   129,    89,   129,    -1,
     129,    90,   129,    -1,   129,    91,   129,    -1,   129,    77,
     129,    -1,   129,    75,   129,    -1,   129,    76,   129,    -1,
     129,    85,   129,    -1,   129,    84,   129,    -1,    93,   129,
      -1,    92,   129,    -1,    76,   144,    -1,    81,   129,    -1,
      80,   129,    -1,    87,   129,    -1,   129,    79,   129,    -1,
     129,    78,   129,    -1,   129,    80,   129,    -1,   129,    81,
     129,    -1,   129,    82,   129,    -1,   129,    83,   129,    -1,
      10,    -1,    11,    -1,    86,    -1,    87,    -1,     8,    -1,
       9,    -1,     6,    -1,   144,    -1,    -1,     3,    -1,     4,
      -1,    23,   129,   125,    99,   148,   151,    28,   125,    -1,
     149,    -1,    -1,   150,    -1,   149,   150,    -1,    27,   129,
     125,    99,    -1,    26,   125,    99,    -1,    -1,    24,   144,
     125,    99,   151,    28,   125,    -1,    25,   144,   125,    99,
     151,    28,   125,    -1,   155,   125,    -1,   156,   125,    -1,
     144,   156,    -1,    56,   144,   156,    -1,    39,   144,   156,
      -1,    56,    39,   144,   156,    -1,    39,    56,   144,   156,
      -1,   157,   158,    -1,   157,    -1,   157,    68,   129,    69,
      -1,    14,    -1,    15,    -1,    16,    -1,    17,    -1,    52,
     144,    -1,    71,   144,    -1,   131,    -1,   158,    70,   131,
      -1,    29,   161,   125,    -1,    30,   161,   125,    -1,     4,
      -1,     5,    -1,    31,   144,   163,   125,    99,    34,   125,
      -1,   166,    -1,    -1,   144,   165,   125,    -1,   158,    -1,
      -1,   144,    -1,   166,    70,   144,    -1,   144,    36,   131,
     125,    -1,   144,    64,   131,   125,    -1,    37,   144,   125,
      -1,    37,   144,   131,   125,    -1,    39,   166,   125,    -1,
      40,   166,    58,   173,   172,   125,    -1,    59,   144,    -1,
      -1,   157,    -1,   144,    -1,    48,    -1,    13,    -1,   175,
      -1,   176,    -1,   144,   176,    -1,    56,   144,   176,    -1,
      39,   144,   176,    -1,    56,    39,   144,   176,    -1,    39,
      56,   144,   176,    -1,   177,   133,   125,    -1,    18,    -1,
      19,    -1,    20,    -1
d697 22
a718 22
       0,   110,   110,   114,   115,   119,   120,   127,   128,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   167,   171,   175,   179,   183,   187,   188,   192,   193,
     197,   201,   205,   209,   213,   217,   221,   222,   226,   227,
     231,   235,   236,   240,   244,   248,   249,   252,   256,   260,
     264,   265,   269,   273,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   307,   308,
     309,   313,   314,   318,   319,   323,   324,   328,   332,   333,
     337,   341,   342,   346,   347,   351,   352,   356,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   379,   380,   381,   382,   383,   384,
     388,   389,   390,   391,   392,   393,   397,   401,   402,   406,
     407,   411,   415,   416,   420,   421,   425,   429,   430,   434,
     438,   442,   443,   447,   448,   449,   450,   451,   455,   456,
     457,   461,   462,   463,   464,   465,   466,   470,   471,   475,
     479,   483,   484,   488,   492,   493,   497,   501,   502,   506,
     507,   511,   515,   519,   520,   524,   528,   532,   533,   537,
     538,   539,   540,   544,   545,   549,   550,   551,   552,   553,
     557,   561,   562,   563
d735 16
a750 15
  "ZEROPAGE", "'\\n'", "':'", "'@@'", "SCOPE_OP", "'A'", "'X'", "'Y'",
  "'='", "'$'", "'{'", "'}'", "'['", "']'", "','", "'.'", "'#'", "HI_OP",
  "LO_OP", "'|'", "'^'", "'&'", "NE_OP", "EQ_OP", "'>'", "'<'", "GE_OP",
  "LE_OP", "SHR_OP", "SHL_OP", "'+'", "'-'", "UMINUS", "'*'", "'/'", "'%'",
  "'!'", "'~'", "'('", "')'", "$accept", "assembly_unit", "end_opt",
  "statement_list", "labelable_statement", "statement", "align_statement",
  "warning_statement", "error_statement", "message_statement",
  "label_statement", "label_addr_part_opt", "label_type_part_opt",
  "while_statement", "rept_statement", "proc_statement",
  "struc_decl_statement", "union_decl_statement", "enum_decl_statement",
  "enum_item_list", "enum_item", "record_decl_statement",
  "record_field_list", "record_field", "charmap_statement",
  "dataseg_statement", "codeseg_statement", "null_statement", "label_decl",
  "line_tail", "newline", "instruction_statement", "instruction",
  "expression", "indexed_identifier", "extended_expression", "sizeof_arg",
d778 5
a782 5
     305,   306,   307,   308,   309,   310,   311,    10,    58,    64,
     312,    65,    88,    89,    61,    36,   123,   125,    91,    93,
      44,    46,    35,   313,   314,   124,    94,    38,   315,   316,
      62,    60,   317,   318,   319,   320,    43,    45,   321,    42,
      47,    37,    33,   126,    40,    41
d789 22
a810 22
       0,    96,    97,    98,    98,    99,    99,   100,   100,   101,
     101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
     101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
     101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
     101,   102,   103,   104,   105,   106,   107,   107,   108,   108,
     109,   110,   111,   112,   113,   114,   115,   115,   116,   116,
     117,   118,   118,   119,   120,   121,   121,   122,   123,   124,
     125,   125,   126,   127,   128,   128,   128,   128,   128,   128,
     128,   128,   128,   129,   129,   129,   129,   129,   129,   129,
     129,   129,   129,   129,   129,   129,   129,   129,   130,   130,
     130,   131,   131,   132,   132,   133,   133,   134,   135,   135,
     136,   137,   137,   138,   138,   139,   139,   140,   141,   141,
     141,   141,   141,   141,   141,   141,   141,   141,   141,   141,
     141,   141,   141,   141,   142,   142,   142,   142,   142,   142,
     143,   143,   143,   143,   143,   143,   144,   145,   145,   146,
     146,   147,   148,   148,   149,   149,   150,   151,   151,   152,
     153,   154,   154,   155,   155,   155,   155,   155,   156,   156,
     156,   157,   157,   157,   157,   157,   157,   158,   158,   159,
     160,   161,   161,   162,   163,   163,   164,   165,   165,   166,
     166,   167,   168,   169,   169,   170,   171,   172,   172,   173,
     173,   173,   173,   174,   174,   175,   175,   175,   175,   175,
     176,   177,   177,   177
d820 18
a837 18
       2,     4,     3,     3,     3,     5,     2,     0,     2,     0,
       6,     6,     6,     6,     6,     6,     1,     2,     1,     2,
       4,     1,     3,     3,     3,     2,     3,     2,     1,     1,
       1,     1,     1,     2,     1,     2,     3,     2,     4,     4,
       6,     6,     4,     1,     2,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     1,     1,     2,     1,     4,
       4,     1,     1,     1,     1,     1,     0,     3,     3,     3,
       3,     1,     0,     1,     3,     1,     0,     1,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       2,     2,     2,     2,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     1,
       1,     8,     1,     0,     1,     2,     4,     3,     0,     7,
       7,     2,     2,     2,     3,     3,     4,     4,     2,     1,
       4,     1,     1,     1,     1,     2,     2,     1,     3,     3,
       3,     1,     1,     7,     1,     0,     3,     1,     0,     1,
       3,     4,     4,     3,     4,     3,     6,     2,     0,     1,
       1,     1,     1,     1,     1,     2,     3,     3,     4,     4,
       3,     1,     1,     1
d845 2
a846 2
       0,     0,   146,   144,   145,   140,   141,    74,     0,   171,
     172,   173,   174,   211,   212,   213,     0,     0,     0,     0,
d848 17
a864 17
       0,     0,   148,     0,     0,     0,     0,     0,     0,     0,
       0,    72,    71,     0,   142,   143,     0,     0,     5,     8,
      38,    35,    36,    34,    33,    32,    31,    30,    26,    27,
      28,    29,    25,    23,    24,    39,     0,    68,    70,    20,
       0,    69,   188,     9,    10,    11,    21,     0,     0,   169,
      14,    15,    12,    13,    16,    17,    37,    18,    19,    22,
     203,   204,   106,    40,   149,   150,   117,    95,    96,     0,
       0,    75,    89,     0,     0,     0,     0,     0,    93,    94,
       0,     0,     0,    77,    83,    85,    86,    87,    90,    91,
      98,    88,    47,     0,    65,    67,     0,     0,     0,   181,
     182,     0,     0,   185,     0,     0,   189,     0,     0,     0,
     189,     0,     0,     0,     0,   147,     0,     0,     0,     0,
     175,     0,     0,     0,     0,     0,   176,     1,     0,     2,
       6,     7,    73,     0,     0,   112,   101,   177,   102,   163,
     187,     0,   205,   161,   162,     0,   168,   105,     0,    84,
     103,   104,    97,     0,     0,    76,   130,   132,   131,   133,
     129,   128,     0,     0,     0,     0,     0,     0,     0,     0,
d866 17
a882 17
       0,     0,     0,     0,     0,    49,    66,     0,     0,     0,
     179,   180,     0,   184,     0,     0,     0,     0,   193,     0,
       0,   165,   207,   195,     0,    64,     0,     0,     0,    61,
       0,     0,     0,    44,    42,    43,     0,   164,   206,     3,
       0,     0,   115,     0,   111,   113,     0,   186,     0,   210,
      82,     0,    92,    78,    79,   124,   125,   123,   135,   134,
     136,   137,   138,   139,   127,   126,   118,   119,   120,   121,
     122,   109,   108,    98,   107,     0,     0,    46,     0,     0,
       0,     0,     0,     0,     0,     0,   190,    41,   194,   167,
     209,   202,   201,   200,   199,   198,     0,     0,     0,    60,
       0,     0,    56,     0,    58,     0,   166,   208,   191,   192,
     110,   116,   178,   170,     0,     0,    99,   100,    48,    45,
       0,   158,   152,   154,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    62,    63,     0,    57,    59,     0,
     114,    81,    80,     0,     0,   155,     0,     0,     0,     0,
      51,    50,   197,   196,    53,    54,    55,    52,     0,     0,
       0,   159,   160,   183,     0,   151
d888 9
a896 9
      -1,    46,   159,    47,    48,    49,    50,    51,    52,    53,
      54,   215,   289,    55,    56,    57,    58,    59,    60,   311,
     312,    61,   238,   239,    62,    63,    64,    65,    66,    67,
      68,    69,    70,   166,   114,   167,   179,   178,   115,   116,
     168,   253,   254,   255,   117,   118,   119,    71,   120,   146,
     121,    73,   331,   332,   333,   335,    74,    75,    76,    77,
      78,    79,   170,    80,    81,   131,    82,   222,    83,   171,
     137,    84,    85,    86,    87,    88,   341,   305,    89,    90,
      91,    92
d901 1
a901 1
#define YYPACT_NINF -272
d904 38
a941 38
    1785,    20,  -272,  -272,  -272,  -272,  -272,    87,     6,  -272,
    -272,  -272,  -272,  -272,  -272,  -272,    26,    20,   794,     6,
       6,    84,    84,     6,   794,   794,     6,     6,     3,     6,
      84,     6,     6,     6,     6,     6,     6,   794,   794,   794,
       5,  -272,  -272,     6,  -272,  -272,    37,   883,  -272,  -272,
    -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,
    -272,  -272,  -272,  -272,  -272,  -272,  1845,  -272,  -272,  -272,
      20,  -272,   532,  -272,  -272,  -272,  -272,    20,    20,   636,
    -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,
    -272,  -272,   794,  -272,  -272,  -272,  -272,  -272,  -272,   113,
       6,  -272,  -272,   794,   794,     6,   794,   794,  -272,   107,
     794,   794,   794,  1860,   -10,  -272,  -272,  -272,  -272,  -272,
     -30,  -272,     9,    20,  -272,  -272,   307,    20,    20,  -272,
    -272,    20,    20,     6,   307,   307,  -272,   702,   572,     6,
     213,   -12,   -48,    20,    20,  -272,    20,     6,    20,    20,
    -272,   307,   307,   307,     6,   213,  -272,  -272,    20,  -272,
    -272,  -272,  -272,   762,   762,   668,   480,  -272,  -272,  -272,
      -3,    20,  -272,  -272,  -272,   794,    -3,   480,    20,  -272,
    -272,  -272,  -272,    32,   365,   480,  -272,   480,   480,    34,
    -272,  -272,  1877,    35,   794,   794,   794,   794,   794,   794,
     794,   794,   794,   794,   794,   794,   794,   794,   794,   794,
       6,     6,   794,   794,   109,    74,  -272,  1785,  1785,  1785,
    -272,  -272,    20,    64,  1785,  1785,     6,   307,  -272,    20,
     213,  -272,  -272,  -272,     1,  -272,  1785,  1785,    11,  -272,
      77,     6,  1785,  -272,  -272,  -272,   213,  -272,  -272,  -272,
      20,    20,  -272,    73,    75,  -272,   762,  -272,   422,  -272,
      76,    82,  -272,  -272,  -272,   866,   948,   782,   319,   319,
      17,    17,    17,    17,    31,    31,    34,    34,  -272,  -272,
    -272,   -10,  -272,   -55,  -272,  1842,  1898,  -272,     1,    20,
     965,  1129,  1129,  1785,  1211,  1293,  -272,  -272,  -272,  -272,
    -272,  -272,  -272,  -272,  -272,    90,  1375,  1457,     6,  -272,
     794,    18,  -272,   -16,  -272,  1539,  -272,  -272,  -272,  -272,
    -272,   762,  -272,  -272,    88,    81,  -272,  -272,  -272,  -272,
     794,   127,   129,  -272,    20,   134,   136,  1621,    20,    20,
       6,    20,    20,    20,  -272,   480,    20,  -272,  -272,    20,
    -272,  -272,  -272,   307,   138,  -272,  1785,    20,    20,    20,
    -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  1785,    20,
    1703,  -272,  -272,  -272,  1047,  -272
d947 9
a955 9
    -272,  -272,  -272,  -162,     7,   103,  -272,  -272,  -272,  -272,
    -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,  -272,
    -141,  -272,  -272,  -137,  -272,  -272,  -272,  -272,  -272,   125,
    -272,  -272,  -272,   321,   -35,  -113,  -272,  -272,    78,   -28,
    -272,  -272,  -272,  -138,  -272,  -272,  -272,  -272,     0,  -272,
    -272,  -272,  -272,  -272,  -147,  -271,  -272,  -272,  -272,  -272,
     -70,   -98,   108,  -272,  -272,    57,  -272,  -272,  -272,  -272,
     -24,  -272,  -235,  -272,  -272,  -272,  -272,  -102,  -272,  -272,
     -69,  -272
d962 1
a962 1
#define YYTABLE_NINF -159
d965 57
a1021 50
      72,   181,   169,   172,   141,   142,   314,     2,   122,     2,
     234,     2,     2,   212,   301,     9,    10,    11,    12,   127,
     128,   336,   226,   133,     2,   229,   136,   138,   140,   136,
     211,   144,   145,   147,   148,   149,   150,   157,   212,   213,
     155,    41,    42,   156,   154,    41,    42,    72,   164,   302,
     250,   251,   252,    36,   160,   290,   291,   292,   226,   139,
     354,   210,   294,   295,   213,   346,    72,   256,    41,    42,
     231,   232,    43,   214,   306,   307,   314,    41,    42,   132,
     315,   308,   123,    41,    42,   247,   248,   143,   129,   130,
      94,    95,   211,     2,    96,    97,    98,   263,   264,   180,
     183,   203,   204,   205,   206,   186,   207,   208,   209,   223,
      94,    95,   287,     2,    96,    97,    98,   205,   206,     2,
     207,   208,   209,   207,   208,   209,    93,     9,    10,    11,
      12,   337,   288,   136,   226,   310,   304,    99,   100,   230,
     320,   124,   125,   322,   325,   321,   324,   240,   101,   340,
     352,   351,   102,   334,   246,   103,   330,    99,   100,   104,
     299,   300,   357,   105,   358,    36,   369,   106,   107,   161,
     347,   344,   102,   108,   109,   281,   316,   317,   182,   110,
     111,   112,   282,   350,    43,   355,   328,   176,     0,     0,
     304,     0,     0,     0,   370,   162,     0,     0,     0,   110,
     111,   112,   173,   174,     0,     0,   374,     0,   252,     0,
     283,   284,     0,     0,     0,     0,     0,    72,    72,    72,
       0,     0,     0,     0,    72,    72,   296,     9,    10,    11,
      12,    13,    14,    15,   303,     0,    72,    72,     0,     0,
       0,   313,    72,     0,     0,     0,     0,     0,   216,     0,
       0,   217,   218,   219,     0,     0,   220,   221,     0,   224,
     225,     0,     0,   228,     0,    36,   233,     0,   235,   236,
       0,   237,     0,   241,   242,     0,   243,   244,   245,     0,
       0,     0,     0,   249,    43,     0,     0,     0,   303,     0,
      72,    72,    72,    72,    72,    72,   257,   160,   160,   160,
       0,   160,   160,   259,     0,     0,    72,    72,   240,     0,
       0,   313,     0,   160,   160,    72,     0,     0,     0,     0,
       0,     0,   160,     0,     0,     0,     0,     0,   113,     0,
       0,     0,     0,     0,     0,     0,     0,    72,     0,   126,
     362,     0,     0,     0,   160,   134,   135,   293,     0,     0,
       0,     0,   297,     0,   298,     0,    72,     0,   151,   152,
     153,     0,     0,   309,    41,    42,     0,     0,    72,     0,
      72,     0,     0,     0,    72,   318,   319,   160,     0,     0,
       0,   160,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,   199,
     200,   201,   202,   203,   204,   205,   206,     0,   207,   208,
     209,     0,     0,   177,   329,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   184,   185,     0,   187,   188,     0,
     189,   190,   191,   192,   260,   261,     0,     0,   348,     0,
     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,
     204,   205,   206,     0,   207,   208,   209,     0,   227,   356,
       0,     0,     0,   360,   361,     0,   363,   364,   365,     0,
       0,   366,     0,     0,   367,     0,     0,     0,   368,     0,
       0,     0,   371,   372,   373,     0,     0,     0,     0,     0,
       0,   323,     0,     0,   375,     0,   258,   194,   195,   196,
d1023 2
a1024 18
       0,   207,   208,   209,     0,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,     0,     0,   285,   286,    94,    95,     0,     2,    96,
      97,    98,     0,     0,     0,     0,     9,    10,    11,    12,
      13,    14,    15,     0,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   163,   207,
     208,   209,     0,     0,     0,    94,    95,     0,     2,    96,
      97,    98,    99,   100,    36,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   164,   102,   165,     0,
       0,     0,     0,    43,     0,     0,     0,     0,   105,     0,
       0,     0,   106,   107,     0,     0,     0,     0,   108,   109,
       0,     0,    99,   100,   110,   111,   112,     0,     0,    41,
      42,   345,     0,     0,     0,     0,     0,   102,   165,    94,
      95,     0,     2,    96,    97,    98,     0,     0,   105,     0,
       0,   353,   106,   107,     0,     0,     0,     0,   108,   109,
       0,     0,     0,     0,   110,   111,   112,     0,     0,     0,
       0,    94,    95,     0,     2,    96,    97,    98,     0,     0,
       0,     0,     0,     0,     0,     0,    99,   100,     0,     0,
d1026 30
a1055 28
       0,   102,   165,     0,   175,    94,    95,     0,     2,    96,
      97,    98,   105,     0,     0,     0,   106,   107,    99,   100,
       0,     0,   108,   109,     0,     0,     0,     0,   110,   111,
     112,     0,     0,   102,   165,     0,     0,     0,  -116,     0,
       0,     0,     0,     0,   105,     0,     0,     0,   106,   107,
       0,     0,    99,   100,   108,   109,     0,     0,     0,     0,
     110,   111,   112,     0,     0,    94,    95,   102,     2,    96,
      97,    98,   226,     0,     0,     0,     0,     0,   105,     0,
       0,     0,   106,   107,     0,     0,     0,     0,   108,   109,
       0,     0,     0,     0,   110,   111,   112,    94,    95,     0,
       2,    96,    97,    98,     0,     0,     0,     0,     0,     0,
       0,     0,    99,   100,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   102,   165,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   105,     0,
       0,     0,   106,   107,    99,   100,     0,     0,   108,   109,
       0,     0,     0,     0,   110,   111,   112,     0,     0,   102,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     105,   207,   208,   209,   106,   107,     0,     0,     0,     0,
     108,   109,     0,    -4,     1,     0,   110,   111,   112,     2,
       0,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,     0,
       0,     0,    21,    22,    23,    24,    25,     0,    26,     0,
      27,   158,    28,    29,    30,    31,    32,     0,    33,    34,
       0,    35,     0,     0,     0,    36,    37,    38,    39,    40,
      41,    42,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,    43,   207,   208,   209,     0,     0,
       0,     0,     0,     0,     0,     0,     1,     0,     0,    44,
      45,     2,     0,     3,     4,     5,     6,     7,     8,     9,
d1057 2
a1058 2
      20,  -153,   330,  -153,    21,    22,    23,    24,    25,     0,
      26,     0,    27,     0,    28,    29,    30,    31,    32,     0,
d1060 27
a1086 2
      39,    40,    41,    42,     0,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,    43,   207,   208,   209,
d1088 1
a1088 1
       0,    44,    45,     2,     0,     3,     4,     5,     6,     7,
d1090 2
a1091 2
      18,    19,    20,  -156,  -156,  -156,    21,    22,    23,    24,
      25,     0,    26,     0,    27,     0,    28,    29,    30,    31,
d1093 2
a1094 2
      37,    38,    39,    40,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
d1096 6
a1101 14
       1,     0,     0,    44,    45,     2,     0,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,   334,     0,  -158,    21,    22,
      23,    24,    25,     0,    26,     0,    27,     0,    28,    29,
      30,    31,    32,     0,    33,    34,     0,    35,     0,     0,
       0,    36,    37,    38,    39,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     1,     0,     0,    44,    45,     2,     0,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,     0,     0,     0,
      21,    22,    23,    24,    25,   338,    26,     0,    27,     0,
      28,    29,    30,    31,    32,     0,    33,    34,     0,    35,
       0,     0,     0,    36,    37,    38,    39,    40,    41,    42,
d1103 2
a1104 2
       0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,     0,     0,    44,    45,     2,
d1107 2
a1108 2
       0,     0,    21,    22,    23,    24,    25,   339,    26,     0,
      27,     0,    28,    29,    30,    31,    32,     0,    33,    34,
d1110 10
a1119 18
      41,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     1,     0,     0,    44,
      45,     2,     0,     3,     4,     5,     6,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,     0,     0,     0,    21,    22,    23,    24,    25,     0,
      26,     0,    27,     0,    28,    29,    30,    31,    32,   342,
      33,    34,     0,    35,     0,     0,     0,    36,    37,    38,
      39,    40,    41,    42,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
       0,    44,    45,     2,     0,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,     0,     0,     0,    21,    22,    23,    24,
      25,     0,    26,     0,    27,     0,    28,    29,    30,    31,
      32,   343,    33,    34,     0,    35,     0,     0,     0,    36,
      37,    38,    39,    40,    41,    42,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    43,     0,
d1121 1
a1121 1
       1,     0,     0,    44,    45,     2,     0,     3,     4,     5,
d1125 2
a1126 10
      30,    31,    32,     0,    33,    34,     0,    35,   349,     0,
       0,    36,    37,    38,    39,    40,    41,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      43,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     1,     0,     0,    44,    45,     2,     0,     3,
       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,     0,     0,     0,
      21,    22,    23,    24,    25,   359,    26,     0,    27,     0,
      28,    29,    30,    31,    32,     0,    33,    34,     0,    35,
       0,     0,     0,    36,    37,    38,    39,    40,    41,    42,
d1128 11
a1138 11
       0,     0,    43,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     1,     0,     0,    44,    45,     2,
       0,     3,     4,     5,     6,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,     0,
       0,  -157,    21,    22,    23,    24,    25,     0,    26,     0,
      27,     0,    28,    29,    30,    31,    32,     0,    33,    34,
       0,    35,     0,     0,     0,    36,    37,    38,    39,    40,
      41,    42,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    43,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     1,     0,     0,    44,
      45,     2,     0,     3,     4,     5,     6,     7,     8,     9,
d1140 1
a1140 1
      20,     0,     0,     0,    21,    22,    23,    24,    25,     0,
d1143 26
a1168 16
      39,    40,    41,    42,     0,     0,     1,     0,     0,     0,
       0,     2,     0,     0,     0,     0,    43,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    44,    45,     0,    21,    22,    23,    24,    25,     0,
      26,     0,    27,     0,    28,    29,    30,    31,    32,     0,
      33,    34,     0,    35,     0,     0,     0,    36,    37,    38,
      39,    40,    41,    42,     0,     0,     0,     0,     0,     0,
       0,   326,     0,     0,     0,     0,    43,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     193,   207,   208,   209,     0,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,     0,   207,
     208,   209,   194,   195,   196,   197,   198,   199,   200,   201,
     202,   203,   204,   205,   206,     0,   207,   208,   209,     0,
       0,     0,   262,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,     0,   207,   208,   209,
       0,     0,     0,   327
d1173 60
a1232 69
       0,    99,    72,    72,    28,    29,   241,     6,     8,     6,
      58,     6,     6,    68,    13,    14,    15,    16,    17,    19,
      20,   292,    70,    23,     6,   138,    26,    27,    28,    29,
      60,    31,    32,    33,    34,    35,    36,     0,    68,    94,
      40,    57,    58,    43,    39,    57,    58,    47,    64,    48,
     163,   164,   165,    52,    47,   217,   218,   219,    70,    56,
     331,    71,   224,   225,    94,    47,    66,    70,    57,    58,
     140,   140,    71,    64,   236,   237,   311,    57,    58,    22,
     242,    70,    56,    57,    58,   155,   155,    30,     4,     5,
       3,     4,    60,     6,     7,     8,     9,    62,    63,    99,
     100,    84,    85,    86,    87,   105,    89,    90,    91,   133,
       3,     4,     3,     6,     7,     8,     9,    86,    87,     6,
      89,    90,    91,    89,    90,    91,     1,    14,    15,    16,
      17,   293,    58,   133,    70,    58,   234,    50,    51,   139,
      67,    16,    17,   256,    62,    70,    70,   147,    61,    59,
      69,    63,    65,    26,   154,    68,    27,    50,    51,    72,
     230,   230,    28,    76,    28,    52,    28,    80,    81,    66,
     311,   308,    65,    86,    87,   210,   246,   246,   100,    92,
      93,    94,   210,   321,    71,   332,   288,    79,    -1,    -1,
     288,    -1,    -1,    -1,   356,    70,    -1,    -1,    -1,    92,
      93,    94,    77,    78,    -1,    -1,   368,    -1,   321,    -1,
     210,   211,    -1,    -1,    -1,    -1,    -1,   217,   218,   219,
      -1,    -1,    -1,    -1,   224,   225,   226,    14,    15,    16,
      17,    18,    19,    20,   234,    -1,   236,   237,    -1,    -1,
      -1,   241,   242,    -1,    -1,    -1,    -1,    -1,   123,    -1,
      -1,   126,   127,   128,    -1,    -1,   131,   132,    -1,   134,
     135,    -1,    -1,   138,    -1,    52,   141,    -1,   143,   144,
      -1,   146,    -1,   148,   149,    -1,   151,   152,   153,    -1,
      -1,    -1,    -1,   158,    71,    -1,    -1,    -1,   288,    -1,
     290,   291,   292,   293,   294,   295,   171,   290,   291,   292,
      -1,   294,   295,   178,    -1,    -1,   306,   307,   308,    -1,
      -1,   311,    -1,   306,   307,   315,    -1,    -1,    -1,    -1,
      -1,    -1,   315,    -1,    -1,    -1,    -1,    -1,     7,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   337,    -1,    18,
     340,    -1,    -1,    -1,   337,    24,    25,   222,    -1,    -1,
      -1,    -1,   227,    -1,   229,    -1,   356,    -1,    37,    38,
      39,    -1,    -1,   238,    57,    58,    -1,    -1,   368,    -1,
     370,    -1,    -1,    -1,   374,   250,   251,   370,    -1,    -1,
      -1,   374,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    -1,    -1,    92,   289,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   103,   104,    -1,   106,   107,    -1,
     109,   110,   111,   112,    69,    70,    -1,    -1,   313,    -1,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    -1,   137,   334,
      -1,    -1,    -1,   338,   339,    -1,   341,   342,   343,    -1,
      -1,   346,    -1,    -1,   349,    -1,    -1,    -1,   353,    -1,
      -1,    -1,   357,   358,   359,    -1,    -1,    -1,    -1,    -1,
      -1,    69,    -1,    -1,   369,    -1,   175,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    -1,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,    -1,    -1,   212,   213,     3,     4,    -1,     6,     7,
       8,     9,    -1,    -1,    -1,    -1,    14,    15,    16,    17,
      18,    19,    20,    -1,    -1,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    36,    89,
      90,    91,    -1,    -1,    -1,     3,     4,    -1,     6,     7,
       8,     9,    50,    51,    52,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    64,    65,    66,    -1,
      -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    76,    -1,
      -1,    -1,    80,    81,    -1,    -1,    -1,    -1,    86,    87,
      -1,    -1,    50,    51,    92,    93,    94,    -1,    -1,    57,
      58,   310,    -1,    -1,    -1,    -1,    -1,    65,    66,     3,
       4,    -1,     6,     7,     8,     9,    -1,    -1,    76,    -1,
      -1,   330,    80,    81,    -1,    -1,    -1,    -1,    86,    87,
      -1,    -1,    -1,    -1,    92,    93,    94,    -1,    -1,    -1,
      -1,     3,     4,    -1,     6,     7,     8,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    -1,    -1,
d1234 8
a1241 10
      -1,    65,    66,    -1,    68,     3,     4,    -1,     6,     7,
       8,     9,    76,    -1,    -1,    -1,    80,    81,    50,    51,
      -1,    -1,    86,    87,    -1,    -1,    -1,    -1,    92,    93,
      94,    -1,    -1,    65,    66,    -1,    -1,    -1,    70,    -1,
      -1,    -1,    -1,    -1,    76,    -1,    -1,    -1,    80,    81,
      -1,    -1,    50,    51,    86,    87,    -1,    -1,    -1,    -1,
      92,    93,    94,    -1,    -1,     3,     4,    65,     6,     7,
       8,     9,    70,    -1,    -1,    -1,    -1,    -1,    76,    -1,
      -1,    -1,    80,    81,    -1,    -1,    -1,    -1,    86,    87,
      -1,    -1,    -1,    -1,    92,    93,    94,     3,     4,    -1,
d1243 21
a1263 17
      -1,    -1,    50,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    65,    66,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,    -1,
      -1,    -1,    80,    81,    50,    51,    -1,    -1,    86,    87,
      -1,    -1,    -1,    -1,    92,    93,    94,    -1,    -1,    65,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      76,    89,    90,    91,    80,    81,    -1,    -1,    -1,    -1,
      86,    87,    -1,     0,     1,    -1,    92,    93,    94,     6,
      -1,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      -1,    -1,    29,    30,    31,    32,    33,    -1,    35,    -1,
      37,    38,    39,    40,    41,    42,    43,    -1,    45,    46,
      -1,    48,    -1,    -1,    -1,    52,    53,    54,    55,    56,
      57,    58,    76,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    71,    89,    90,    91,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    86,
      87,     6,    -1,     8,     9,    10,    11,    12,    13,    14,
d1265 2
a1266 2
      25,    26,    27,    28,    29,    30,    31,    32,    33,    -1,
      35,    -1,    37,    -1,    39,    40,    41,    42,    43,    -1,
d1268 27
a1294 2
      55,    56,    57,    58,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    71,    89,    90,    91,
d1296 1
a1296 1
      -1,    86,    87,     6,    -1,     8,     9,    10,    11,    12,
d1298 2
a1299 2
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    -1,    35,    -1,    37,    -1,    39,    40,    41,    42,
d1301 2
a1302 2
      53,    54,    55,    56,    57,    58,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,
d1304 6
a1309 14
       1,    -1,    -1,    86,    87,     6,    -1,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
      31,    32,    33,    -1,    35,    -1,    37,    -1,    39,    40,
      41,    42,    43,    -1,    45,    46,    -1,    48,    -1,    -1,
      -1,    52,    53,    54,    55,    56,    57,    58,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,    -1,    86,    87,     6,    -1,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    -1,    -1,
      29,    30,    31,    32,    33,    34,    35,    -1,    37,    -1,
      39,    40,    41,    42,    43,    -1,    45,    46,    -1,    48,
      -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    58,
d1311 2
a1312 2
      -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,    -1,    86,    87,     6,
d1315 2
a1316 2
      -1,    -1,    29,    30,    31,    32,    33,    34,    35,    -1,
      37,    -1,    39,    40,    41,    42,    43,    -1,    45,    46,
d1318 10
a1327 18
      57,    58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    86,
      87,     6,    -1,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    -1,    -1,    -1,    29,    30,    31,    32,    33,    -1,
      35,    -1,    37,    -1,    39,    40,    41,    42,    43,    44,
      45,    46,    -1,    48,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    58,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,
      -1,    86,    87,     6,    -1,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    -1,    -1,    -1,    29,    30,    31,    32,
      33,    -1,    35,    -1,    37,    -1,    39,    40,    41,    42,
      43,    44,    45,    46,    -1,    48,    -1,    -1,    -1,    52,
      53,    54,    55,    56,    57,    58,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,
d1329 1
a1329 1
       1,    -1,    -1,    86,    87,     6,    -1,     8,     9,    10,
d1334 1
a1334 1
      -1,    52,    53,    54,    55,    56,    57,    58,    -1,    -1,
d1336 11
a1346 19
      71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     1,    -1,    -1,    86,    87,     6,    -1,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    -1,    -1,    -1,
      29,    30,    31,    32,    33,    34,    35,    -1,    37,    -1,
      39,    40,    41,    42,    43,    -1,    45,    46,    -1,    48,
      -1,    -1,    -1,    52,    53,    54,    55,    56,    57,    58,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     1,    -1,    -1,    86,    87,     6,
      -1,     8,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    -1,
      -1,    28,    29,    30,    31,    32,    33,    -1,    35,    -1,
      37,    -1,    39,    40,    41,    42,    43,    -1,    45,    46,
      -1,    48,    -1,    -1,    -1,    52,    53,    54,    55,    56,
      57,    58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,    86,
      87,     6,    -1,     8,     9,    10,    11,    12,    13,    14,
d1348 1
a1348 1
      25,    -1,    -1,    -1,    29,    30,    31,    32,    33,    -1,
d1351 26
a1376 16
      55,    56,    57,    58,    -1,    -1,     1,    -1,    -1,    -1,
      -1,     6,    -1,    -1,    -1,    -1,    71,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    86,    87,    -1,    29,    30,    31,    32,    33,    -1,
      35,    -1,    37,    -1,    39,    40,    41,    42,    43,    -1,
      45,    46,    -1,    48,    -1,    -1,    -1,    52,    53,    54,
      55,    56,    57,    58,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    69,    -1,    -1,    -1,    -1,    71,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      70,    89,    90,    91,    -1,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    -1,
      -1,    -1,    95,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      -1,    -1,    -1,    95
d1387 34
a1420 34
      56,    57,    58,    71,    86,    87,    97,    99,   100,   101,
     102,   103,   104,   105,   106,   109,   110,   111,   112,   113,
     114,   117,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   143,   144,   147,   152,   153,   154,   155,   156,   157,
     159,   160,   162,   164,   167,   168,   169,   170,   171,   174,
     175,   176,   177,   125,     3,     4,     7,     8,     9,    50,
      51,    61,    65,    68,    72,    76,    80,    81,    86,    87,
      92,    93,    94,   129,   130,   134,   135,   140,   141,   142,
     144,   146,   144,    56,   125,   125,   129,   144,   144,     4,
       5,   161,   161,   144,   129,   129,   144,   166,   144,    56,
     144,   166,   166,   161,   144,   144,   145,   144,   144,   144,
     144,   129,   129,   129,    39,   144,   144,     0,    38,    98,
     100,   101,   125,    36,    64,    66,   129,   131,   136,   156,
     158,   165,   176,   125,   125,    68,   158,   129,   133,   132,
     144,   157,   134,   144,   129,   129,   144,   129,   129,   129,
     129,   129,   129,    70,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    89,    90,    91,
      71,    60,    68,    94,    64,   107,   125,   125,   125,   125,
     125,   125,   163,   166,   125,   125,    70,   129,   125,   131,
     144,   156,   176,   125,    58,   125,   125,   125,   118,   119,
     144,   125,   125,   125,   125,   125,   144,   156,   176,   125,
     131,   131,   131,   137,   138,   139,    70,   125,   129,   125,
      69,    70,    95,    62,    63,   129,   129,   129,   129,   129,
     129,   129,   129,   129,   129,   129,   129,   129,   129,   129,
     129,   130,   135,   144,   144,   129,   129,     3,    58,   108,
      99,    99,    99,   125,    99,    99,   144,   125,   125,   156,
     176,    13,    48,   144,   157,   173,    99,    99,    70,   125,
      58,   115,   116,   144,   168,    99,   156,   176,   125,   125,
      67,    70,   131,    69,    70,    62,    69,    95,   173,   125,
      27,   148,   149,   150,    26,   151,   151,    99,    34,    34,
      59,   172,    44,    44,   119,   129,    47,   116,   125,    49,
     139,    63,    69,   129,   151,   150,   125,    28,    28,    34,
     125,   125,   144,   125,   125,   125,   125,   125,   125,    28,
      99,   125,   125,   125,    99,   125
d2257 1
a2257 1
#line 110 "parser.y"
d2262 1
a2262 1
#line 114 "parser.y"
d2267 1
a2267 1
#line 119 "parser.y"
d2272 1
a2272 1
#line 120 "parser.y"
d2280 1
a2280 1
#line 127 "parser.y"
d2285 1
a2285 1
#line 128 "parser.y"
d2290 1
a2290 1
#line 132 "parser.y"
d2295 1
a2295 1
#line 133 "parser.y"
d2300 1
a2300 1
#line 134 "parser.y"
d2305 1
a2305 1
#line 135 "parser.y"
d2310 1
a2310 1
#line 136 "parser.y"
d2315 1
a2315 1
#line 137 "parser.y"
d2320 1
a2320 1
#line 138 "parser.y"
d2325 1
a2325 1
#line 139 "parser.y"
d2330 1
a2330 1
#line 140 "parser.y"
d2335 1
a2335 1
#line 141 "parser.y"
d2340 1
a2340 1
#line 142 "parser.y"
d2345 1
a2345 1
#line 143 "parser.y"
d2350 1
a2350 1
#line 144 "parser.y"
d2355 1
a2355 1
#line 145 "parser.y"
d2360 1
a2360 1
#line 146 "parser.y"
d2365 1
a2365 1
#line 147 "parser.y"
d2370 1
a2370 1
#line 148 "parser.y"
d2375 1
a2375 1
#line 149 "parser.y"
d2380 1
a2380 1
#line 150 "parser.y"
d2385 1
a2385 1
#line 151 "parser.y"
d2390 1
a2390 1
#line 152 "parser.y"
d2395 1
a2395 1
#line 153 "parser.y"
d2400 1
a2400 1
#line 154 "parser.y"
d2405 1
a2405 1
#line 155 "parser.y"
d2410 1
a2410 1
#line 156 "parser.y"
d2415 1
a2415 1
#line 157 "parser.y"
d2420 1
a2420 1
#line 158 "parser.y"
d2425 1
a2425 1
#line 159 "parser.y"
d2430 1
a2430 1
#line 160 "parser.y"
d2435 1
a2435 1
#line 161 "parser.y"
d2440 1
a2440 1
#line 162 "parser.y"
d2445 2
a2446 2
#line 163 "parser.y"
    { (yyval.node) = NULL; }
d2451 1
a2451 1
    { (yyval.node) = astnode_create_align((yyvsp[(2) - (4)].node), (yyvsp[(3) - (4)].node), (yyloc)); }
d2456 1
a2456 1
    { (yyval.node) = astnode_create_warning((yyvsp[(2) - (3)].node), (yyloc)); }
d2461 1
a2461 1
    { (yyval.node) = astnode_create_error((yyvsp[(2) - (3)].node), (yyloc)); }
d2466 1
a2466 1
    { (yyval.node) = astnode_create_message((yyvsp[(2) - (3)].node), (yyloc)); }
d2471 1
a2471 1
    { (yyval.node) = astnode_create_label((yyvsp[(2) - (5)].node)->label, (yyvsp[(3) - (5)].node), (yyvsp[(4) - (5)].node), (yyloc)); }
d2476 1
a2476 1
    { (yyval.node) = astnode_create_integer((yyvsp[(2) - (2)].integer), (yyloc)); }
d2480 2
a2481 2
#line 188 "parser.y"
    { (yyval.node) = NULL; }
d2485 1
a2485 1
#line 192 "parser.y"
d2490 1
a2490 1
#line 193 "parser.y"
d2495 2
a2496 2
#line 197 "parser.y"
    { (yyval.node) = astnode_create_while((yyvsp[(2) - (6)].node), (yyvsp[(4) - (6)].node), (yyloc)); }
d2501 1
a2501 1
    { (yyval.node) = astnode_create_rept((yyvsp[(2) - (6)].node), (yyvsp[(4) - (6)].node), (yyloc)); }
d2506 1
a2506 1
    { (yyval.node) = astnode_create_proc((yyvsp[(2) - (6)].node), (yyvsp[(4) - (6)].node), (yyloc)); }
d2511 1
a2511 1
    { (yyval.node) = astnode_create_struc_decl((yyvsp[(2) - (6)].node), (yyvsp[(4) - (6)].node), (yyloc)); }
d2516 1
a2516 1
    { (yyval.node) = astnode_create_union_decl((yyvsp[(2) - (6)].node), (yyvsp[(4) - (6)].node), (yyloc)); }
d2521 1
a2521 1
    { (yyval.node) = astnode_create_enum_decl((yyvsp[(2) - (6)].node), (yyvsp[(4) - (6)].node), (yyloc)); }
d2526 1
a2526 1
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d2530 2
a2531 2
#line 222 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (2)].node); astnode_add_sibling((yyval.node), (yyvsp[(2) - (2)].node)); }
d2535 1
a2535 1
#line 226 "parser.y"
d2540 2
a2541 2
#line 227 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (2)].node); }
d2545 2
a2546 2
#line 231 "parser.y"
    { (yyval.node) = astnode_create_record_decl((yyvsp[(2) - (4)].node), (yyvsp[(3) - (4)].node), (yyloc)); }
d2551 1
a2551 1
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d2555 2
a2556 2
#line 236 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (3)].node); astnode_add_sibling((yyval.node), (yyvsp[(3) - (3)].node)); }
d2560 2
a2561 2
#line 240 "parser.y"
    { (yyval.node) = astnode_create_bitfield_decl((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2566 1
a2566 1
    { (yyval.node) = astnode_create_charmap((yyvsp[(2) - (3)].node), (yyloc)); }
d2571 1
a2571 1
    { (yyval.node) = astnode_create_dataseg(0, (yyloc)); }
d2575 2
a2576 2
#line 249 "parser.y"
    { (yyval.node) = astnode_create_dataseg(ZEROPAGE_FLAG, (yyloc)); }
d2580 2
a2581 2
#line 252 "parser.y"
    { (yyval.node) = astnode_create_codeseg((yyloc)); }
d2585 2
a2586 2
#line 256 "parser.y"
    { (yyval.node) = NULL; }
d2591 1
a2591 1
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d2596 1
a2596 1
    { ; }
d2600 2
a2601 2
#line 265 "parser.y"
    { ; }
d2605 1
a2605 1
#line 269 "parser.y"
d2611 1
a2611 1
    { (yyval.node) = (yyvsp[(1) - (2)].node); }
d2616 1
a2616 1
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (1)].mnemonic), IMPLIED_MODE, NULL, (yyloc)); }
d2620 2
a2621 2
#line 278 "parser.y"
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (2)].mnemonic), ACCUMULATOR_MODE, NULL, (yyloc)); }
d2625 2
a2626 2
#line 279 "parser.y"
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (3)].mnemonic), IMMEDIATE_MODE, (yyvsp[(3) - (3)].node), (yyloc)); }
d2630 2
a2631 2
#line 280 "parser.y"
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (2)].mnemonic), ABSOLUTE_MODE, (yyvsp[(2) - (2)].node), (yyloc)); }
d2635 2
a2636 2
#line 281 "parser.y"
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (4)].mnemonic), ABSOLUTE_X_MODE, (yyvsp[(2) - (4)].node), (yyloc)); }
d2640 2
a2641 2
#line 282 "parser.y"
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (4)].mnemonic), ABSOLUTE_Y_MODE, (yyvsp[(2) - (4)].node), (yyloc)); }
d2645 2
a2646 2
#line 283 "parser.y"
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (6)].mnemonic), PREINDEXED_INDIRECT_MODE, (yyvsp[(3) - (6)].node), (yyloc)); }
d2650 2
a2651 2
#line 284 "parser.y"
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (6)].mnemonic), POSTINDEXED_INDIRECT_MODE, (yyvsp[(3) - (6)].node), (yyloc)); }
d2655 2
a2656 2
#line 285 "parser.y"
    { (yyval.node) = astnode_create_instruction((yyvsp[(1) - (4)].mnemonic), INDIRECT_MODE, (yyvsp[(3) - (4)].node), (yyloc)); }
d2660 2
a2661 2
#line 289 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d2665 2
a2666 2
#line 290 "parser.y"
    { (yyval.node) = astnode_create_sizeof((yyvsp[(2) - (2)].node), (yyloc)); }
d2670 1
a2670 1
#line 291 "parser.y"
d2675 2
a2676 2
#line 292 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d2680 1
a2680 1
#line 293 "parser.y"
d2685 1
a2685 1
#line 294 "parser.y"
d2690 2
a2691 2
#line 295 "parser.y"
    { (yyval.node) = astnode_create_pc((yyloc)); }
d2695 1
a2695 1
#line 296 "parser.y"
d2700 2
a2701 2
#line 297 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d2705 2
a2706 2
#line 298 "parser.y"
    { (yyval.node) = (yyvsp[(2) - (3)].node); }
d2710 2
a2711 2
#line 299 "parser.y"
    { (yyval.node) = astnode_create_forward_branch("+", (yyloc)); }
d2715 2
a2716 2
#line 300 "parser.y"
    { (yyval.node) = astnode_create_backward_branch("-", (yyloc)); }
d2720 2
a2721 2
#line 301 "parser.y"
    { (yyval.node) = astnode_create_forward_branch((yyvsp[(1) - (1)].ident), (yyloc)); }
d2725 2
a2726 2
#line 302 "parser.y"
    { (yyval.node) = astnode_create_backward_branch((yyvsp[(1) - (1)].ident), (yyloc)); }
d2730 2
a2731 2
#line 303 "parser.y"
    { (yyval.node) = astnode_create_mask((yyvsp[(2) - (2)].node), (yyloc)); }
d2735 2
a2736 2
#line 307 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d2740 2
a2741 2
#line 308 "parser.y"
    { (yyval.node) = astnode_create_index((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].node), (yyloc)); }
d2745 2
a2746 2
#line 309 "parser.y"
    { (yyval.node) = astnode_create_index((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].node), (yyloc)); }
d2750 2
a2751 2
#line 313 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d2755 2
a2756 2
#line 314 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d2760 1
a2760 1
#line 318 "parser.y"
d2765 1
a2765 1
#line 319 "parser.y"
d2770 1
a2770 1
#line 323 "parser.y"
d2775 2
a2776 2
#line 324 "parser.y"
    { (yyval.node) = NULL; }
d2780 2
a2781 2
#line 328 "parser.y"
    { (yyval.node) = astnode_create_scope((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2786 1
a2786 1
    { (yyval.node) = astnode_create_dot((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2790 2
a2791 2
#line 333 "parser.y"
    { (yyval.node) = astnode_create_dot((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2795 2
a2796 2
#line 337 "parser.y"
    { (yyval.node) = astnode_create_struc((yyvsp[(2) - (3)].node), (yyloc)); }
d2801 1
a2801 1
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d2805 2
a2806 2
#line 342 "parser.y"
    { (yyval.node) = NULL; }
d2810 1
a2810 1
#line 346 "parser.y"
d2815 2
a2816 2
#line 347 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (3)].node); astnode_add_sibling((yyval.node), (yyvsp[(3) - (3)].node)); }
d2820 1
a2820 1
#line 351 "parser.y"
d2825 2
a2826 2
#line 352 "parser.y"
    { (yyval.node) = astnode_create_null((yyloc)); }
d2830 2
a2831 2
#line 356 "parser.y"
    { (yyval.node) = astnode_create_local_id((yyvsp[(1) - (1)].ident), (yyloc)); }
d2836 1
a2836 1
    { (yyval.node) = astnode_create_arithmetic(PLUS_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2840 2
a2841 2
#line 361 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(MINUS_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2845 2
a2846 2
#line 362 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(MUL_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2850 2
a2851 2
#line 363 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(DIV_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2855 2
a2856 2
#line 364 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(MOD_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2860 2
a2861 2
#line 365 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(AND_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2865 2
a2866 2
#line 366 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(OR_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2870 2
a2871 2
#line 367 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(XOR_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2875 2
a2876 2
#line 368 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(SHL_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2880 2
a2881 2
#line 369 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(SHR_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2885 2
a2886 2
#line 370 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(NEG_OPERATOR, (yyvsp[(2) - (2)].node), NULL, (yyloc)); }
d2890 2
a2891 2
#line 371 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(NOT_OPERATOR, (yyvsp[(2) - (2)].node), NULL, (yyloc)); }
d2895 2
a2896 2
#line 372 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(BANK_OPERATOR, (yyvsp[(2) - (2)].node), NULL, (yyloc)); }
d2900 2
a2901 2
#line 373 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(LO_OPERATOR, (yyvsp[(2) - (2)].node), NULL, (yyloc)); }
d2905 2
a2906 2
#line 374 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(HI_OPERATOR, (yyvsp[(2) - (2)].node), NULL, (yyloc)); }
d2910 2
a2911 2
#line 375 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(UMINUS_OPERATOR, (yyvsp[(2) - (2)].node), NULL, (yyloc)); }
d2915 2
a2916 2
#line 379 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(EQ_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2920 2
a2921 2
#line 380 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(NE_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2925 2
a2926 2
#line 381 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(GT_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2930 2
a2931 2
#line 382 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(LT_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2935 2
a2936 2
#line 383 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(GE_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2940 2
a2941 2
#line 384 "parser.y"
    { (yyval.node) = astnode_create_arithmetic(LE_OPERATOR, (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d2945 2
a2946 2
#line 388 "parser.y"
    { (yyval.node) = astnode_create_label((yyvsp[(1) - (1)].label), NULL, NULL, (yyloc)); }
d2950 2
a2951 2
#line 389 "parser.y"
    { (yyval.node) = astnode_create_local_label((yyvsp[(1) - (1)].label), (yyloc)); }
d2955 2
a2956 2
#line 390 "parser.y"
    { (yyval.node) = astnode_create_forward_branch_decl("+", (yyloc)); }
d2960 2
a2961 2
#line 391 "parser.y"
    { (yyval.node) = astnode_create_backward_branch_decl("-", (yyloc)); }
d2965 2
a2966 2
#line 392 "parser.y"
    { (yyval.node) = astnode_create_forward_branch_decl((yyvsp[(1) - (1)].ident), (yyloc)); }
d2970 2
a2971 2
#line 393 "parser.y"
    { (yyval.node) = astnode_create_backward_branch_decl((yyvsp[(1) - (1)].ident), (yyloc)); }
d2975 2
a2976 2
#line 397 "parser.y"
    { (yyval.node) = astnode_create_identifier((yyvsp[(1) - (1)].ident), (yyloc)); }
d2981 1
a2981 1
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d2985 2
a2986 2
#line 402 "parser.y"
    { (yyval.node) = astnode_create_null((yyloc)); }
d2990 2
a2991 2
#line 406 "parser.y"
    { (yyval.node) = astnode_create_integer((yyvsp[(1) - (1)].integer), (yyloc)); }
d2995 2
a2996 2
#line 407 "parser.y"
    { (yyval.node) = astnode_create_string((yyvsp[(1) - (1)].string), (yyloc)); }
d3000 2
a3001 2
#line 411 "parser.y"
    { (yyval.node) = astnode_create_if((yyvsp[(2) - (8)].node), (yyvsp[(4) - (8)].node), (yyvsp[(5) - (8)].node), (yyvsp[(6) - (8)].node), (yyloc)); }
d3006 1
a3006 1
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d3010 2
a3011 2
#line 416 "parser.y"
    { (yyval.node) = NULL; }
d3015 1
a3015 1
#line 420 "parser.y"
d3020 2
a3021 2
#line 421 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (2)].node); astnode_add_sibling((yyval.node), (yyvsp[(2) - (2)].node)); }
d3025 2
a3026 2
#line 425 "parser.y"
    { (yyval.node) = astnode_create_case((yyvsp[(2) - (4)].node), (yyvsp[(4) - (4)].node), (yyloc)); }
d3031 1
a3031 1
    { (yyval.node) = (yyvsp[(3) - (3)].node); }
d3035 2
a3036 2
#line 430 "parser.y"
    { (yyval.node) = NULL; }
d3040 2
a3041 2
#line 434 "parser.y"
    { (yyval.node) = astnode_create_ifdef((yyvsp[(2) - (7)].node), (yyvsp[(4) - (7)].node), (yyvsp[(5) - (7)].node), (yyloc)); }
d3046 1
a3046 1
    { (yyval.node) = astnode_create_ifndef((yyvsp[(2) - (7)].node), (yyvsp[(4) - (7)].node), (yyvsp[(5) - (7)].node), (yyloc)); }
d3051 1
a3051 1
    { (yyval.node) = (yyvsp[(1) - (2)].node); }
d3055 2
a3056 2
#line 443 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (2)].node); }
d3060 2
a3061 2
#line 447 "parser.y"
    { (yyval.node) = astnode_create_var_decl(0, (yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node), (yyloc)); }
d3065 2
a3066 2
#line 448 "parser.y"
    { (yyval.node) = astnode_create_var_decl(ZEROPAGE_FLAG, (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d3070 2
a3071 2
#line 449 "parser.y"
    { (yyval.node) = astnode_create_var_decl(PUBLIC_FLAG, (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d3075 2
a3076 2
#line 450 "parser.y"
    { (yyval.node) = astnode_create_var_decl(ZEROPAGE_FLAG | PUBLIC_FLAG, (yyvsp[(3) - (4)].node), (yyvsp[(4) - (4)].node), (yyloc)); }
d3080 2
a3081 2
#line 451 "parser.y"
    { (yyval.node) = astnode_create_var_decl(PUBLIC_FLAG | ZEROPAGE_FLAG, (yyvsp[(3) - (4)].node), (yyvsp[(4) - (4)].node), (yyloc)); }
d3085 2
a3086 2
#line 455 "parser.y"
    { (yyval.node) = astnode_create_data((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node), (yyloc)); }
d3090 2
a3091 2
#line 456 "parser.y"
    { (yyval.node) = astnode_create_storage((yyvsp[(1) - (1)].node), NULL, (yyloc)); }
d3095 2
a3096 2
#line 457 "parser.y"
    { (yyval.node) = astnode_create_storage((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].node), (yyloc)); }
d3100 2
a3101 2
#line 461 "parser.y"
    { (yyval.node) = astnode_create_datatype(BYTE_DATATYPE, NULL, (yyloc)); }
d3105 2
a3106 2
#line 462 "parser.y"
    { (yyval.node) = astnode_create_datatype(CHAR_DATATYPE, NULL, (yyloc)); }
d3110 2
a3111 2
#line 463 "parser.y"
    { (yyval.node) = astnode_create_datatype(WORD_DATATYPE, NULL, (yyloc)); }
d3115 2
a3116 2
#line 464 "parser.y"
    { (yyval.node) = astnode_create_datatype(DWORD_DATATYPE, NULL, (yyloc)); }
d3120 2
a3121 2
#line 465 "parser.y"
    { (yyval.node) = astnode_create_datatype(USER_DATATYPE, (yyvsp[(2) - (2)].node), (yyloc)); }
d3125 2
a3126 2
#line 466 "parser.y"
    { (yyval.node) = astnode_create_datatype(USER_DATATYPE, (yyvsp[(2) - (2)].node), (yyloc)); }
d3130 2
a3131 2
#line 470 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d3135 2
a3136 2
#line 471 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (3)].node); astnode_add_sibling((yyval.node), (yyvsp[(3) - (3)].node)); }
d3140 2
a3141 2
#line 475 "parser.y"
    { (yyval.node) = astnode_create_incsrc((yyvsp[(2) - (3)].node), (yyloc)); handle_incsrc((yyval.node)); }
d3146 1
a3146 1
    { (yyval.node) = astnode_create_incbin((yyvsp[(2) - (3)].node), (yyloc)); handle_incbin((yyval.node)); }
d3151 1
a3151 1
    { (yyval.node) = astnode_create_string((yyvsp[(1) - (1)].string), (yyloc)); }
d3155 2
a3156 2
#line 484 "parser.y"
    { (yyval.node) = astnode_create_file_path((yyvsp[(1) - (1)].string), (yyloc)); }
d3160 2
a3161 2
#line 488 "parser.y"
    { (yyval.node) = astnode_create_macro_decl((yyvsp[(2) - (7)].node), (yyvsp[(3) - (7)].node), (yyvsp[(5) - (7)].node), (yyloc)); }
d3166 1
a3166 1
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d3170 2
a3171 2
#line 493 "parser.y"
    { (yyval.node) = NULL; }
d3175 2
a3176 2
#line 497 "parser.y"
    { (yyval.node) = astnode_create_macro((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyloc)); }
d3181 1
a3181 1
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d3185 2
a3186 2
#line 502 "parser.y"
    { (yyval.node) = NULL; }
d3190 1
a3190 1
#line 506 "parser.y"
d3195 2
a3196 2
#line 507 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (3)].node); astnode_add_sibling((yyval.node), (yyvsp[(3) - (3)].node)); }
d3200 2
a3201 2
#line 511 "parser.y"
    { (yyval.node) = astnode_create_equ((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].node), (yyloc)); }
d3206 1
a3206 1
    { (yyval.node) = astnode_create_assign((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].node), (yyloc)); }
d3211 1
a3211 1
    { (yyval.node) = astnode_create_equ((yyvsp[(2) - (3)].node), astnode_create_integer(0, (yyloc)), (yyloc)); }
d3215 2
a3216 2
#line 520 "parser.y"
    { (yyval.node) = astnode_create_equ((yyvsp[(2) - (4)].node), (yyvsp[(3) - (4)].node), (yyloc)); }
d3220 2
a3221 2
#line 524 "parser.y"
    { (yyval.node) = astnode_create_public((yyvsp[(2) - (3)].node), (yyloc)); }
d3226 1
a3226 1
    { (yyval.node) = astnode_create_extrn((yyvsp[(2) - (6)].node), (yyvsp[(4) - (6)].node), (yyvsp[(5) - (6)].node), (yyloc)); }
d3231 1
a3231 1
    { (yyval.node) = (yyvsp[(2) - (2)].node); }
d3235 2
a3236 2
#line 533 "parser.y"
    { (yyval.node) = NULL; }
d3240 2
a3241 2
#line 537 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d3245 2
a3246 2
#line 538 "parser.y"
    { (yyval.node) = astnode_create_datatype(USER_DATATYPE, (yyvsp[(1) - (1)].node), (yyloc)); }
d3250 2
a3251 2
#line 539 "parser.y"
    { (yyval.node) = astnode_create_integer(PROC_SYMBOL, (yyloc)); }
d3255 2
a3256 2
#line 540 "parser.y"
    { (yyval.node) = astnode_create_integer(LABEL_SYMBOL, (yyloc)); }
d3260 2
a3261 2
#line 544 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d3265 2
a3266 2
#line 545 "parser.y"
    { (yyval.node) = (yyvsp[(1) - (1)].node); }
d3270 2
a3271 2
#line 549 "parser.y"
    { (yyval.node) = astnode_create_var_decl(0, (yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node), (yyloc)); }
d3275 2
a3276 2
#line 550 "parser.y"
    { (yyval.node) = astnode_create_var_decl(ZEROPAGE_FLAG, (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d3280 2
a3281 2
#line 551 "parser.y"
    { (yyval.node) = astnode_create_var_decl(PUBLIC_FLAG, (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node), (yyloc)); }
d3285 2
a3286 2
#line 552 "parser.y"
    { (yyval.node) = astnode_create_var_decl(ZEROPAGE_FLAG | PUBLIC_FLAG, (yyvsp[(3) - (4)].node), (yyvsp[(4) - (4)].node), (yyloc)); }
d3290 2
a3291 2
#line 553 "parser.y"
    { (yyval.node) = astnode_create_var_decl(PUBLIC_FLAG | ZEROPAGE_FLAG, (yyvsp[(3) - (4)].node), (yyvsp[(4) - (4)].node), (yyloc)); }
d3295 2
a3296 2
#line 557 "parser.y"
    { (yyval.node) = astnode_create_storage((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyloc)); }
d3301 10
d3314 2
a3315 2
  case 212:
#line 562 "parser.y"
d3319 2
a3320 2
  case 213:
#line 563 "parser.y"
d3326 1
a3326 1
#line 3303 "parser.c"
d3546 1
a3546 1
#line 565 "parser.y"
@


1.2
log
@convert tabs to whitespaces
@
text
@d208 1
a208 1
 * $Id: parser.y,v 1.9 2005/01/05 02:28:40 kenth Exp khansen $
d210 3
d247 1
d281 1
a281 1
#line 52 "parser.y"
d291 1
a291 1
#line 288 "parser.c"
d316 1
a316 1
#line 313 "parser.c"
d692 22
a713 22
       0,   106,   106,   110,   111,   115,   116,   123,   124,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   163,   167,   171,   175,   179,   183,   184,   188,   189,
     193,   197,   201,   205,   209,   213,   217,   218,   222,   223,
     227,   231,   232,   236,   240,   244,   245,   248,   252,   256,
     260,   261,   265,   269,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   303,   304,
     305,   309,   310,   314,   315,   319,   320,   324,   328,   329,
     333,   337,   338,   342,   343,   347,   348,   352,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   375,   376,   377,   378,   379,   380,
     384,   385,   386,   387,   388,   389,   393,   397,   398,   402,
     403,   407,   411,   412,   416,   417,   421,   425,   426,   430,
     434,   438,   439,   443,   444,   445,   446,   447,   451,   452,
     453,   457,   458,   459,   460,   461,   462,   466,   467,   471,
     475,   479,   480,   484,   488,   489,   493,   497,   498,   502,
     503,   507,   511,   515,   516,   520,   524,   528,   529,   533,
     534,   535,   536,   540,   541,   545,   546,   547,   548,   549,
     553,   557,   558,   559
d2243 1
a2243 1
#line 106 "parser.y"
d2248 1
a2248 1
#line 110 "parser.y"
d2253 1
a2253 1
#line 115 "parser.y"
d2258 1
a2258 1
#line 116 "parser.y"
d2266 1
a2266 1
#line 123 "parser.y"
d2271 1
a2271 1
#line 124 "parser.y"
d2276 1
a2276 1
#line 128 "parser.y"
d2281 1
a2281 1
#line 129 "parser.y"
d2286 1
a2286 1
#line 130 "parser.y"
d2291 1
a2291 1
#line 131 "parser.y"
d2296 1
a2296 1
#line 132 "parser.y"
d2301 1
a2301 1
#line 133 "parser.y"
d2306 1
a2306 1
#line 134 "parser.y"
d2311 1
a2311 1
#line 135 "parser.y"
d2316 1
a2316 1
#line 136 "parser.y"
d2321 1
a2321 1
#line 137 "parser.y"
d2326 1
a2326 1
#line 138 "parser.y"
d2331 1
a2331 1
#line 139 "parser.y"
d2336 1
a2336 1
#line 140 "parser.y"
d2341 1
a2341 1
#line 141 "parser.y"
d2346 1
a2346 1
#line 142 "parser.y"
d2351 1
a2351 1
#line 143 "parser.y"
d2356 1
a2356 1
#line 144 "parser.y"
d2361 1
a2361 1
#line 145 "parser.y"
d2366 1
a2366 1
#line 146 "parser.y"
d2371 1
a2371 1
#line 147 "parser.y"
d2376 1
a2376 1
#line 148 "parser.y"
d2381 1
a2381 1
#line 149 "parser.y"
d2386 1
a2386 1
#line 150 "parser.y"
d2391 1
a2391 1
#line 151 "parser.y"
d2396 1
a2396 1
#line 152 "parser.y"
d2401 1
a2401 1
#line 153 "parser.y"
d2406 1
a2406 1
#line 154 "parser.y"
d2411 1
a2411 1
#line 155 "parser.y"
d2416 1
a2416 1
#line 156 "parser.y"
d2421 1
a2421 1
#line 157 "parser.y"
d2426 1
a2426 1
#line 158 "parser.y"
d2431 1
a2431 1
#line 159 "parser.y"
d2436 1
a2436 1
#line 163 "parser.y"
d2441 1
a2441 1
#line 167 "parser.y"
d2446 1
a2446 1
#line 171 "parser.y"
d2451 1
a2451 1
#line 175 "parser.y"
d2456 1
a2456 1
#line 179 "parser.y"
d2461 1
a2461 1
#line 183 "parser.y"
d2466 1
a2466 1
#line 184 "parser.y"
d2471 1
a2471 1
#line 188 "parser.y"
d2476 1
a2476 1
#line 189 "parser.y"
d2481 1
a2481 1
#line 193 "parser.y"
d2486 1
a2486 1
#line 197 "parser.y"
d2491 1
a2491 1
#line 201 "parser.y"
d2496 1
a2496 1
#line 205 "parser.y"
d2501 1
a2501 1
#line 209 "parser.y"
d2506 1
a2506 1
#line 213 "parser.y"
d2511 1
a2511 1
#line 217 "parser.y"
d2516 1
a2516 1
#line 218 "parser.y"
d2521 1
a2521 1
#line 222 "parser.y"
d2526 1
a2526 1
#line 223 "parser.y"
d2531 1
a2531 1
#line 227 "parser.y"
d2536 1
a2536 1
#line 231 "parser.y"
d2541 1
a2541 1
#line 232 "parser.y"
d2546 1
a2546 1
#line 236 "parser.y"
d2551 1
a2551 1
#line 240 "parser.y"
d2556 1
a2556 1
#line 244 "parser.y"
d2561 1
a2561 1
#line 245 "parser.y"
d2566 1
a2566 1
#line 248 "parser.y"
d2571 1
a2571 1
#line 252 "parser.y"
d2576 1
a2576 1
#line 256 "parser.y"
d2581 1
a2581 1
#line 260 "parser.y"
d2586 1
a2586 1
#line 261 "parser.y"
d2591 1
a2591 1
#line 265 "parser.y"
d2596 1
a2596 1
#line 269 "parser.y"
d2601 1
a2601 1
#line 273 "parser.y"
d2606 1
a2606 1
#line 274 "parser.y"
d2611 1
a2611 1
#line 275 "parser.y"
d2616 1
a2616 1
#line 276 "parser.y"
d2621 1
a2621 1
#line 277 "parser.y"
d2626 1
a2626 1
#line 278 "parser.y"
d2631 1
a2631 1
#line 279 "parser.y"
d2636 1
a2636 1
#line 280 "parser.y"
d2641 1
a2641 1
#line 281 "parser.y"
d2646 1
a2646 1
#line 285 "parser.y"
d2651 1
a2651 1
#line 286 "parser.y"
d2656 1
a2656 1
#line 287 "parser.y"
d2661 1
a2661 1
#line 288 "parser.y"
d2666 1
a2666 1
#line 289 "parser.y"
d2671 1
a2671 1
#line 290 "parser.y"
d2676 1
a2676 1
#line 291 "parser.y"
d2681 1
a2681 1
#line 292 "parser.y"
d2686 1
a2686 1
#line 293 "parser.y"
d2691 1
a2691 1
#line 294 "parser.y"
d2696 1
a2696 1
#line 295 "parser.y"
d2701 1
a2701 1
#line 296 "parser.y"
d2706 1
a2706 1
#line 297 "parser.y"
d2711 1
a2711 1
#line 298 "parser.y"
d2716 1
a2716 1
#line 299 "parser.y"
d2721 1
a2721 1
#line 303 "parser.y"
d2726 1
a2726 1
#line 304 "parser.y"
d2731 1
a2731 1
#line 305 "parser.y"
d2736 1
a2736 1
#line 309 "parser.y"
d2741 1
a2741 1
#line 310 "parser.y"
d2746 1
a2746 1
#line 314 "parser.y"
d2751 1
a2751 1
#line 315 "parser.y"
d2756 1
a2756 1
#line 319 "parser.y"
d2761 1
a2761 1
#line 320 "parser.y"
d2766 1
a2766 1
#line 324 "parser.y"
d2771 1
a2771 1
#line 328 "parser.y"
d2776 1
a2776 1
#line 329 "parser.y"
d2781 1
a2781 1
#line 333 "parser.y"
d2786 1
a2786 1
#line 337 "parser.y"
d2791 1
a2791 1
#line 338 "parser.y"
d2796 1
a2796 1
#line 342 "parser.y"
d2801 1
a2801 1
#line 343 "parser.y"
d2806 1
a2806 1
#line 347 "parser.y"
d2811 1
a2811 1
#line 348 "parser.y"
d2816 1
a2816 1
#line 352 "parser.y"
d2821 1
a2821 1
#line 356 "parser.y"
d2826 1
a2826 1
#line 357 "parser.y"
d2831 1
a2831 1
#line 358 "parser.y"
d2836 1
a2836 1
#line 359 "parser.y"
d2841 1
a2841 1
#line 360 "parser.y"
d2846 1
a2846 1
#line 361 "parser.y"
d2851 1
a2851 1
#line 362 "parser.y"
d2856 1
a2856 1
#line 363 "parser.y"
d2861 1
a2861 1
#line 364 "parser.y"
d2866 1
a2866 1
#line 365 "parser.y"
d2871 1
a2871 1
#line 366 "parser.y"
d2876 1
a2876 1
#line 367 "parser.y"
d2881 1
a2881 1
#line 368 "parser.y"
d2886 1
a2886 1
#line 369 "parser.y"
d2891 1
a2891 1
#line 370 "parser.y"
d2896 1
a2896 1
#line 371 "parser.y"
d2901 1
a2901 1
#line 375 "parser.y"
d2906 1
a2906 1
#line 376 "parser.y"
d2911 1
a2911 1
#line 377 "parser.y"
d2916 1
a2916 1
#line 378 "parser.y"
d2921 1
a2921 1
#line 379 "parser.y"
d2926 1
a2926 1
#line 380 "parser.y"
d2931 1
a2931 1
#line 384 "parser.y"
d2936 1
a2936 1
#line 385 "parser.y"
d2941 1
a2941 1
#line 386 "parser.y"
d2946 1
a2946 1
#line 387 "parser.y"
d2951 1
a2951 1
#line 388 "parser.y"
d2956 1
a2956 1
#line 389 "parser.y"
d2961 1
a2961 1
#line 393 "parser.y"
d2966 1
a2966 1
#line 397 "parser.y"
d2971 1
a2971 1
#line 398 "parser.y"
d2976 1
a2976 1
#line 402 "parser.y"
d2981 1
a2981 1
#line 403 "parser.y"
d2986 1
a2986 1
#line 407 "parser.y"
d2991 1
a2991 1
#line 411 "parser.y"
d2996 1
a2996 1
#line 412 "parser.y"
d3001 1
a3001 1
#line 416 "parser.y"
d3006 1
a3006 1
#line 417 "parser.y"
d3011 1
a3011 1
#line 421 "parser.y"
d3016 1
a3016 1
#line 425 "parser.y"
d3021 1
a3021 1
#line 426 "parser.y"
d3026 1
a3026 1
#line 430 "parser.y"
d3031 1
a3031 1
#line 434 "parser.y"
d3036 1
a3036 1
#line 438 "parser.y"
d3041 1
a3041 1
#line 439 "parser.y"
d3046 1
a3046 1
#line 443 "parser.y"
d3051 1
a3051 1
#line 444 "parser.y"
d3056 1
a3056 1
#line 445 "parser.y"
d3061 1
a3061 1
#line 446 "parser.y"
d3066 1
a3066 1
#line 447 "parser.y"
d3071 1
a3071 1
#line 451 "parser.y"
d3076 1
a3076 1
#line 452 "parser.y"
d3081 1
a3081 1
#line 453 "parser.y"
d3086 1
a3086 1
#line 457 "parser.y"
d3091 1
a3091 1
#line 458 "parser.y"
d3096 1
a3096 1
#line 459 "parser.y"
d3101 1
a3101 1
#line 460 "parser.y"
d3106 1
a3106 1
#line 461 "parser.y"
d3111 1
a3111 1
#line 462 "parser.y"
d3116 1
a3116 1
#line 466 "parser.y"
d3121 1
a3121 1
#line 467 "parser.y"
d3126 1
a3126 1
#line 471 "parser.y"
d3131 1
a3131 1
#line 475 "parser.y"
d3136 1
a3136 1
#line 479 "parser.y"
d3141 1
a3141 1
#line 480 "parser.y"
d3146 1
a3146 1
#line 484 "parser.y"
d3151 1
a3151 1
#line 488 "parser.y"
d3156 1
a3156 1
#line 489 "parser.y"
d3161 1
a3161 1
#line 493 "parser.y"
d3166 1
a3166 1
#line 497 "parser.y"
d3171 1
a3171 1
#line 498 "parser.y"
d3176 1
a3176 1
#line 502 "parser.y"
d3181 1
a3181 1
#line 503 "parser.y"
d3186 1
a3186 1
#line 507 "parser.y"
d3191 1
a3191 1
#line 511 "parser.y"
d3196 1
a3196 1
#line 515 "parser.y"
d3201 1
a3201 1
#line 516 "parser.y"
d3206 1
a3206 1
#line 520 "parser.y"
d3211 1
a3211 1
#line 524 "parser.y"
d3216 1
a3216 1
#line 528 "parser.y"
d3221 1
a3221 1
#line 529 "parser.y"
d3226 1
a3226 1
#line 533 "parser.y"
d3231 1
a3231 1
#line 534 "parser.y"
d3236 1
a3236 1
#line 535 "parser.y"
d3241 1
a3241 1
#line 536 "parser.y"
d3246 1
a3246 1
#line 540 "parser.y"
d3251 1
a3251 1
#line 541 "parser.y"
d3256 1
a3256 1
#line 545 "parser.y"
d3261 1
a3261 1
#line 546 "parser.y"
d3266 1
a3266 1
#line 547 "parser.y"
d3271 1
a3271 1
#line 548 "parser.y"
d3276 1
a3276 1
#line 549 "parser.y"
d3281 1
a3281 1
#line 553 "parser.y"
d3286 1
a3286 1
#line 557 "parser.y"
d3291 1
a3291 1
#line 558 "parser.y"
d3296 1
a3296 1
#line 559 "parser.y"
d3302 1
a3302 1
#line 3299 "parser.c"
d3522 1
a3522 1
#line 561 "parser.y"
d3577 1
d3584 18
a3601 1
        fp = fopen(file->string, "rb");
@


1.1
log
@Initial revision
@
text
@d208 1
a208 1
 * $Id: parser.y,v 1.9 2005/01/05 02:28:40 kenth Exp $
d246 3
a248 3
void yyerror(char *);	/* In lexer */
int yylex(void);	/* In lexer */
int yypushandrestart(char *);	/* In lexer */
d250 5
a254 5
extern char *yytext;	/* In lexer */
extern YYLTYPE yylloc;	/* In lexer */
extern astnode *root_node;	/* Root of the generated parse tree */
void handle_incsrc(astnode *);	/* See below */
void handle_incbin(astnode *);	/* See below */
d2256 3
a2258 3
		 if ((yyvsp[(1) - (2)].node) != NULL) { (yyval.node) = (yyvsp[(1) - (2)].node); astnode_add_sibling((yyval.node), (yyvsp[(2) - (2)].node)); }
		 else { (yyval.node) = (yyvsp[(2) - (2)].node); }
		}
d3529 23
a3551 23
	char errs[512];
	/* Get the node which describes the file to include */
	astnode *file = astnode_get_child(n, 0);

	switch (astnode_get_type(file)) {
		case STRING_NODE:
		/* TODO: add path searching */
		case FILE_PATH_NODE:
		switch (yypushandrestart(file->string)) {
			case 0:
			/* Success */
			break;
			case 1:
			/* Failed to open file */
			sprintf(errs, "could not open '%s' for reading", file->string);
			yyerror(errs);
			break;
			case 2:
			/* Stack overflow */
			yyerror("Maximum include nesting level reached");
			break;
		}
		break;
d3553 2
a3554 2
		default: break;
	}
d3567 35
a3601 35
	FILE *fp;
	unsigned char *data;
	int size;
	char errs[512];
	/* Get the node which describes the file to include */
	astnode *file = astnode_get_child(n, 0);

	switch (astnode_get_type(file)) {
		case STRING_NODE:
		/* TODO: add path searching */
		case FILE_PATH_NODE:
		/* Attempt to open file */
		fp = fopen(file->string, "rb");
		if (fp) {
			/* Get filesize */
			fseek(fp, 0, SEEK_END);
			size = ftell(fp);
			rewind(fp);
			if (size > 0) {
				/* Allocate buffer to hold file contents */
				data = (unsigned char *)malloc(size);
				/* Read file contents into buffer */
				fread(data, 1, size, fp);
				/* Insert binary node */
				astnode_add_sibling(n, astnode_create_binary(data, size, n->loc) );
			}
			/* Close file */
			fclose(fp);
		}
		else {
			/* Couldn't open file */
			sprintf(errs, "could not open '%s' for reading", file->string);
			yyerror(errs);
		}
		break;
d3603 2
a3604 2
		default: break;
	}
@
